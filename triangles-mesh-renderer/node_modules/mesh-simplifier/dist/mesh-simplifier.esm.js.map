{"version":3,"file":"mesh-simplifier.esm.js","sources":["../src/math/Vector3.ts","../src/MeshSimplifiers/FastQuadric/structs/Triangle.ts","../src/math/SymmetricMatrix.ts","../src/MeshSimplifiers/FastQuadric/structs/Vertex.ts","../src/MeshSimplifiers/FastQuadric/structs/Ref.ts","../src/math/Face3.ts","../src/util/Timer.ts","../src/MeshSimplifiers/FastQuadric/FastQuadric.ts","../src/Geometries/ThreeGeometry.ts","../src/consts.ts","../src/Adapters/ThreeAdapter.ts"],"sourcesContent":["/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nclass Vector3 {\n  static addVectors(v1: Vector3, v2: Vector3) {\n    return new Vector3().copy(v1).add(v2);\n  }\n\n  static subVectors(v1: Vector3, v2: Vector3) {\n    return new Vector3().copy(v1).sub(v2);\n  }\n\n  public x: number;\n  public y: number;\n  public z: number;\n\n  constructor(v0: number = 0, v1: number = 0, v2: number = 0) {\n    this.x = v0;\n    this.y = v1;\n    this.z = v2;\n  }\n\n  public copy(other: Vector3) {\n    this.x = other.x;\n    this.y = other.y;\n    this.z = other.z;\n    return this;\n  }\n\n  public add(other: Vector3) {\n    this.x += other.x;\n    this.y += other.y;\n    this.z += other.z;\n    return this;\n  }\n\n  public sub(other: Vector3) {\n    this.x -= other.x;\n    this.y -= other.y;\n    this.z -= other.z;\n    return this;\n  }\n\n  public dot(other: Vector3): number {\n    const { x: x1, y: y1, z: z1 } = this;\n    const { x: x2, y: y2, z: z2 } = other;\n\n    return x1 * x2 + y1 * y2 + z1 * z2;\n  }\n\n  public cross(other: Vector3): this {\n    const { x: x1, y: y1, z: z1 } = this;\n    const { x: x2, y: y2, z: z2 } = other;\n\n    this.x = y1 * z2 - z1 * y2;\n    this.y = z1 * x2 - x1 * z2;\n    this.z = x1 * y2 - y1 * x2;\n    return this;\n  }\n\n  public normalize(): this {\n    const length = this.length();\n\n    if (length > 0) {\n      const invLength = 1 / length;\n      this.x *= invLength;\n      this.y *= invLength;\n      this.z *= invLength;\n    }\n\n    return this;\n  }\n\n  public length(): number {\n    const { x, y, z } = this;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  public scaleSclar(factor: number): this {\n    this.x *= factor;\n    this.y *= factor;\n    this.z *= factor;\n\n    return this;\n  }\n}\n\nexport default Vector3;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Vector3 from \"~/math/Vector3\";\n\nclass Triangle {\n  public originalIndex: number;\n  public v: [number, number, number];\n  public err: [number, number, number, number];\n  public deleted: boolean;\n  public dirty: boolean;\n  public n: Vector3;\n\n  constructor(idx: number) {\n    this.originalIndex = idx;\n    this.v = [0, 0, 0];\n    this.err = [0, 0, 0, 0];\n    this.deleted = false;\n    this.dirty = false;\n    this.n = new Vector3();\n  }\n}\n\nexport default Triangle;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n// Original code from\n// https://github.com/sp4cerat/Fast-Quadric-Mesh-Simplification/blob/master/src.gl/Simplify.h\n\nclass SymmetricMatrix {\n  static makePlane(a: number, b: number, c: number, d: number): SymmetricMatrix {\n    return new SymmetricMatrix(\n      a * a, a * b, a * c, a * d,\n             b * b, b * c, b * d,\n                    c * c, c * d,\n                           d * d,\n    );\n  }\n\n  public m: number[];\n\n  constructor(\n    m11: number = 0, m12: number = 0, m13: number = 0, m14: number = 0,\n                     m22: number = 0, m23: number = 0, m24: number = 0,\n                                      m33: number = 0, m34: number = 0,\n                                                       m44: number = 0,\n  ) {\n    this.m = new Array(10);\n    this.set(m11, m12, m13, m14, m22, m23, m24, m33, m34, m44);\n  }\n\n  public copy(other: SymmetricMatrix): this {\n    const m = other.m;\n    this.m = m.concat();\n    return this;\n  }\n\n  public set(\n    m11: number, m12: number, m13: number, m14: number,\n                 m22: number, m23: number, m24: number,\n                              m33: number, m34: number,\n                                           m44: number,\n  ) {\n    const m = this.m;\n    m[0] = m11; m[1] = m12; m[2] = m13; m[3] = m14;\n                m[4] = m22; m[5] = m23; m[6] = m24;\n                            m[7] = m33; m[8] = m34;\n                                        m[9] = m44;\n  }\n\n  public det(\n    a11: number, a12: number, a13: number,\n    a21: number, a22: number, a23: number,\n    a31: number, a32: number, a33: number,\n  ): number {\n    const m = this.m;\n    const det = m[a11] * m[a22] * m[a33]\n      + m[a13] * m[a21] * m[a32]\n      + m[a12] * m[a23] * m[a31]\n      - m[a13] * m[a22] * m[a31]\n      - m[a11] * m[a23] * m[a32]\n      - m[a12] * m[a21] * m[a33];\n    return det;\n  }\n\n  public add(other: SymmetricMatrix): this {\n    const m = this.m;\n    const n = other.m;\n    this.set(\n      m[0] + n[0], m[1] + n[1], m[2] + n[2], m[3] + n[3],\n                   m[4] + n[4], m[5] + n[5], m[6] + n[6],\n                                m[7] + n[7], m[8] + n[8],\n                                             m[9] + n[9],\n    );\n\n    return this;\n  }\n}\n\nexport default SymmetricMatrix;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Vector3 from \"~/math/Vector3\";\nimport SymmetricMatrix from \"~/math/SymmetricMatrix\";\n\nclass Vertex {\n  public originalIndex: number;\n  public p: Vector3;\n  public tstart: number;\n  public tcount: number;\n  public q: SymmetricMatrix;\n  public border: boolean;\n\n  constructor(idx: number) {\n    this.originalIndex = idx;\n    this.p = new Vector3();\n    this.tstart = 0;\n    this.tcount = 0;\n    this.q = new SymmetricMatrix();\n    this.border = false;\n  }\n}\n\nexport default Vertex;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nclass Ref {\n  public tid: number;\n  public tvertex: number;\n\n  constructor() {\n    this.tid = 0;\n    this.tvertex = 0;\n  }\n}\n\nexport default Ref;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Vector3 from \"./Vector3\";\n\nclass Face3 {\n  public index: number;\n  public normal: Vector3;\n\n  constructor(\n    public a: number,\n    public b: number,\n    public c: number\n  ) {}\n}\n\nexport default Face3;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nclass Timer {\n  private _diff: number = 0;\n  private _startTime: number | [number, number] | null = null;\n\n  /**\n   * Time diff in miliseconds\n   */\n  public get diff() { return this._diff; }\n\n  public start(): void {\n    if (typeof process !== \"undefined\" && process.hrtime) {\n      // Use high resolution timer in Node\n      this._startTime = process.hrtime();\n    } else {\n      this._startTime = Date.now();\n    }\n  }\n\n  public end(): void {\n    // Not started\n    if (this._startTime == null) return;\n\n    if (typeof process !== \"undefined\" && process.hrtime) {\n      // Use high resolution timer in Node\n      const diff = process.hrtime(this._startTime as [number, number]);\n      const diffInMiliSeconds = 1000 * (diff[0] + diff[1] * 1e-9); // diff[1] is in nanoseconds\n\n      this._diff = diffInMiliSeconds;\n    } else {\n      this._diff = Date.now() - (this._startTime as number);\n    }\n\n    this._startTime = null;\n  }\n}\n\nexport default Timer;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n * Original code: https://github.com/sp4cerat/Fast-Quadric-Mesh-Simplification\n * License: MIT\n */\n\nimport MeshSimplifier from \"../MeshSimplifier\";\nimport Triangle from \"./structs/Triangle\";\nimport Vertex from \"./structs/Vertex\";\nimport Ref from \"./structs/Ref\";\nimport Vector3 from \"~/math/Vector3\";\nimport Face3 from \"~/math/Face3\";\nimport SymmetricMatrix from \"~/math/SymmetricMatrix\";\nimport Adapter from \"~/Adapters/Adapter\";\nimport Geometry from \"~/Geometries/Geometry\";\nimport Timer from \"~/util/Timer\";\n\nclass FastQuadric implements MeshSimplifier {\n  /* Options */\n  public targetPercentage: number;\n  public aggressiveness: number;\n\n  private _triangles: Triangle[];\n  private _vertices: Vertex[];\n  private _refs: Ref[];\n  private _timer: Timer;\n\n  public get timeConsumed() { return this._timer.diff; }\n\n  constructor({\n    targetPercentage = 0.5,\n    aggressiveness = 7\n  } = {}) {\n    this._triangles = [];\n    this._vertices = [];\n    this._refs = [];\n    this.targetPercentage = targetPercentage;\n    this.aggressiveness = aggressiveness;\n    this._timer = new Timer();\n  }\n\n  public simplify(target: Adapter | Geometry): this {\n    const timer = this._timer;\n    timer.start();\n\n    if ((target as Adapter).geometries) {\n      (target as Adapter).geometries.forEach(geometry => {\n        this._process(geometry);\n      });\n    } else {\n      this._process(target as Geometry);\n    }\n\n    timer.end();\n\n    return this;\n  }\n\n  private _process(geometry: Geometry) {\n    this._getData(geometry);\n\n    const triangles = this._triangles;\n    const vertices = this._vertices;\n    const refs = this._refs;\n    const targetPercentage = this.targetPercentage;\n    const aggressiveness = this.aggressiveness;\n\n    const targetCount = this._triangles.length * targetPercentage;\n\n    triangles.forEach(triangle => triangle.deleted = false);\n\n    let deletedTriangles: number = 0;\n    const deleted0: boolean[] = [];\n    const deleted1: boolean[] = [];\n    const triangleCount = triangles.length;\n\n    for (let iteration = 0; iteration < 100; iteration++) {\n      // Break when target number of triangles reached\n      if (triangleCount - deletedTriangles <= targetCount) break;\n\n      // Update mesh once in a while\n\t\t\tif (iteration % 5 === 0) {\n\t\t\t\tthis._updateMesh(iteration);\n      }\n\n      // Clear dirty flag\n      triangles.forEach(triangle => triangle.dirty = false);\n\n      //\n\t\t\t// All triangles with edges below the threshold will be removed\n\t\t\t//\n\t\t\t// The following numbers works well for most models.\n\t\t\t// If it does not, try to adjust the 3 parameters\n      //\n      const threshold = 0.000000001 * Math.pow(iteration + 3, aggressiveness);\n\n      for (let i = triangles.length - 1; i >= 0; i--) {\n        const t = triangles[i];\n        if (t.err[3] > threshold || t.deleted || t.dirty) continue;\n\n        for (let j = 0; j < 3; j++) {\n          if (t.err[j] < threshold) {\n            const i0 = t.v[j];\n            const i1 = t.v[(j + 1) % 3];\n\n            const v0 = vertices[i0];\n            const v1 = vertices[i1];\n\n            // Border check\n            if (v0.border || v1.border) continue;\n\n            // Compute vertex to collapse to\n            const p = new Vector3();\n            this._calculateError(i0, i1, p);\n\n            deleted0.splice(0); // normals temporarily\n            deleted1.splice(0); // normals temporarily\n\n            // Don't remove if flipped\n            if (this._flipped(p, i1, v0, deleted0)) continue;\n            if (this._flipped(p, i0, v1, deleted1)) continue;\n\n            // Not flipped, so remove edge\n            v0.p = p;\n            v0.q.add(v1.q);\n\n            const tstart = refs.length;\n\n            deletedTriangles += this._updateTriangles(i0, v0, deleted0);\n            deletedTriangles += this._updateTriangles(i0, v1, deleted1);\n\n            const tcount = refs.length - tstart;\n\n            v0.tstart = tstart;\n            v0.tcount = tcount;\n            break;\n          }\n        }\n\n        // Done?\n        if (triangleCount - deletedTriangles <= targetCount) break;\n      }\n    }\n\n    this._compactMesh();\n\n    this._setData(geometry);\n  }\n\n  private _getData(geometry: Geometry) {\n    const data = geometry.prepare();\n\n    this._vertices = data.vertices.map((v, idx) => {\n      const vertex = new Vertex(idx);\n      vertex.p.copy(v);\n      return vertex;\n    });\n\n    this._triangles = data.faces.map((f, idx) => {\n      const triangle = new Triangle(idx);\n      triangle.v = [f.a, f.b, f.c];\n      return triangle;\n    });\n\n    this._refs = [];\n  }\n\n  private _setData(geometry: Geometry) {\n    const triangles = this._triangles;\n\n    const vertices = this._vertices.map(vertex => vertex.p);\n    const faces = triangles.map(triangle => {\n      const v = triangle.v;\n      return new Face3(v[0], v[1], v[2]);\n    });\n\n    const unculledVertices = this._vertices.map(v => v.originalIndex);\n    const unculledFaces = this._triangles.map(f => f.originalIndex);\n\n    geometry.update({\n      vertices,\n      faces,\n      unculledVertices,\n      unculledFaces,\n    });\n  }\n\n  private _flipped(p: Vector3, i: number, v: Vertex, deleted: boolean[]): boolean {\n    const triangles = this._triangles;\n    const vertices = this._vertices;\n    const refs = this._refs;\n\n    for (let k = 0; k < v.tcount; k++) {\n      const ref = refs[v.tstart + k];\n      const t = triangles[ref.tid];\n      if (t.deleted) continue;\n\n      const s = ref.tvertex;\n      const id1 = t.v[(s + 1) % 3];\n      const id2 = t.v[(s + 2) % 3];\n\n      if (id1 === i || id2 === i) {\n        deleted[k] = true;\n        continue;\n      }\n\n      const d1 = Vector3.subVectors(vertices[id1].p, p);\n      const d2 = Vector3.subVectors(vertices[id2].p, p);\n      d1.normalize();\n      d2.normalize();\n\n      if (Math.abs(d1.dot(d2)) > 0.999) return true;\n\n      const n = new Vector3().copy(d1).cross(d2);\n      n.normalize();\n      deleted[k] = false;\n      if (n.dot(t.n) < 0.2) return true;\n    }\n    return false;\n  }\n\n  private _updateTriangles(i: number, v: Vertex, deleted: boolean[]): number {\n    const triangles = this._triangles;\n    const refs = this._refs;\n    const p = new Vector3();\n\n    let deletedCount = 0;\n    for (let k = 0; k < v.tcount; k++) {\n      const r = refs[v.tstart + k];\n      const t = triangles[r.tid];\n\n      if (t.deleted) continue;\n      if (deleted[k]) {\n        t.deleted = true;\n        deletedCount++;\n        continue;\n      }\n\n      t.v[r.tvertex] = i;\n      t.dirty = true;\n      t.err[0] = this._calculateError(t.v[0], t.v[1], p);\n      t.err[1] = this._calculateError(t.v[1], t.v[2], p);\n      t.err[2] = this._calculateError(t.v[2], t.v[0], p);\n      t.err[3] = Math.min(t.err[0], t.err[1], t.err[2]);\n      refs.push(r);\n    }\n\n    return deletedCount;\n  }\n\n  private _updateMesh(iteration: number) {\n    const vertices = this._vertices;\n    const refs = this._refs;\n\n\t\tif (iteration > 0) {\n      // compact triangles\n      this._triangles = this._triangles.filter(triangle => !triangle.deleted);\n\t\t} else {\n      //\n      // Init Quadrics by Plane & Edge Errors\n      //\n      // required at the beginning ( iteration == 0 )\n      // recomputing during the simplification is not required,\n      // but mostly improves the result for closed meshes\n      //\n      vertices.forEach(vertex => vertex.q = new SymmetricMatrix());\n\n      this._triangles.forEach(t => {\n        const p = t.v.map(v => vertices[v].p);\n        const n = Vector3.subVectors(p[1], p[0])\n          .cross(Vector3.subVectors(p[2], p[0]))\n          .normalize();\n\n        t.n = n;\n        const tmp = SymmetricMatrix.makePlane(n.x, n.y, n.z, -n.dot(p[0]));\n\n        t.v.forEach(v => vertices[v].q.add(tmp));\n      });\n\n      this._triangles.forEach(t => {\n        const p = new Vector3();\n        t.v.forEach((v, i) => {\n          t.err[i] = this._calculateError(v, t.v[(i + 1) % 3], p);\n        });\n      });\n    }\n\n    // Init Reference ID list\n    vertices.forEach(vertex => {\n      vertex.tstart = 0;\n      vertex.tcount = 0;\n    });\n\n    const triangles = this._triangles;\n    triangles.forEach(triangle => {\n      triangle.v.forEach(v => vertices[v].tcount++);\n    });\n\n    let tstart = 0;\n    vertices.forEach(v => {\n      v.tstart = tstart;\n      tstart += v.tcount;\n      v.tcount = 0;\n    });\n\n    // Write References\n    for (let i = refs.length; i < triangles.length * 3; i++) {\n\t\t\trefs[i] = new Ref();\n\t\t}\n\n    triangles.forEach((t, i) => {\n      for (let j = 0; j < 3; j++) {\n        const v = vertices[t.v[j]];\n        refs[v.tstart + v.tcount].tid = i;\n        refs[v.tstart + v.tcount].tvertex = j;\n        v.tcount++;\n      };\n    });\n\n\t\t// Identify boundary : vertices[].border=0,1\n\t\tif (iteration === 0) {\n      vertices.forEach(vertex => vertex.border = false);\n      vertices.forEach(v => {\n        // clear\n        const vcount: number[] = [];\n        const vids: number[] = [];\n\n        for (let i = 0; i < v.tcount; i++) {\n          const k = refs[v.tstart + i].tid;\n          const t = triangles[k];\n\n          for (let j = 0; j < 3; j++) {\n            const id = t.v[j];\n            let ofs = 0;\n\n            while (ofs < vcount.length) {\n              if (vids[ofs] === id) break;\n              ofs++;\n            }\n\n            if (ofs === vcount.length) {\n              vcount.push(1);\n              vids.push(id);\n            } else {\n              vcount[ofs]++;\n            }\n          };\n        }\n\n        for (let j = 0; j < vcount.length; j++) {\n          if (vcount[j] === 1) {\n            vertices[vids[j]].border = true;\n          }\n        };\n      });\n\t\t}\n  }\n\n  // Error for one edge\n  private _calculateError(idV1: number, idV2: number, result: Vector3) {\n    // Compute interpolated vertex\n    const vertices = this._vertices;\n    const v1 = vertices[idV1];\n    const v2 = vertices[idV2];\n    const q = new SymmetricMatrix().copy(v1.q).add(v2.q);\n    const border = v1.border && v2.border;\n    const det = q.det(0, 1, 2, 1, 4, 5, 2, 5, 7);\n\n    let error: number = 0;\n\n    if (det !== 0 && !border) {\n      // q_delta is invertible\n      result.x = -1 / det * (q.det(1, 2, 3, 4, 5, 6, 5, 7, 8)); // vx = A41/det(q_delta)\n      result.y =  1 / det * (q.det(0, 2, 3, 1, 5, 6, 2, 7, 8)); // vy = A42/det(q_delta)\n      result.z = -1 / det * (q.det(0, 1, 3, 1, 4, 6, 2, 5, 8)); // vz = A43/det(q_delta)\n      error = this._vertexError(q, result);\n    } else {\n      const p1 = v1.p;\n      const p2 = v2.p;\n      const p3 = new Vector3(\n        (p1.x + p2.x) * 0.5,\n        (p1.y + p2.y) * 0.5,\n        (p1.z + p2.z) * 0.5,\n      );\n\n      const error1 = this._vertexError(q, p1);\n      const error2 = this._vertexError(q, p2);\n      const error3 = this._vertexError(q, p3);\n      error = Math.min(error1, error2, error3);\n\n      if (error1 === error) result.copy(p1);\n      if (error2 === error) result.copy(p2);\n      if (error3 === error) result.copy(p3);\n    }\n\n    return error;\n  }\n\n  private _vertexError(q: SymmetricMatrix, v: Vector3): number {\n    const {x, y, z} = v;\n    const m = q.m;\n\n    const err = m[0] * x * x\n      + 2 * m[1] * x * y\n      + 2 * m[2] * x * z\n      + 2 * m[3] * x\n      +     m[4] * y * y\n      + 2 * m[5] * y * z\n      + 2 * m[6] * y\n      +     m[7] * z * z\n      + 2 * m[8] * z\n      +     m[9];\n\n    return err;\n  }\n\n  private _compactMesh() {\n    this._triangles = this._triangles.filter(t => !t.deleted);\n\n    const triangles = this._triangles;\n    const vertices = this._vertices;\n\n    vertices.forEach(vertex => vertex.tcount = 0);\n    triangles.forEach(triangle => {\n      triangle.v.forEach(v => {\n        vertices[v].tcount = 1;\n      });\n    });\n\n    let dst = 0;\n    vertices.forEach(vertex => {\n      if (vertex.tcount > 0) {\n        vertex.tstart = dst;\n        vertices[dst].originalIndex = vertex.originalIndex;\n        vertices[dst].p = vertex.p;\n        dst++;\n      }\n    });\n\n    triangles.forEach(t => {\n      t.v.forEach((v, i) => {\n        t.v[i] = vertices[v].tstart;\n      });\n    });\n\n    vertices.splice(dst); // resize\n  }\n}\n\nexport default FastQuadric;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport * as THREE from \"three\";\nimport Geometry from \"./Geometry\";\nimport Vector3 from \"~/math/Vector3\";\nimport Face3 from \"~/math/Face3\";\n\n// TODO: Support line geometry\n\n/**\n * Adapter class for three.js geometry\n * @example\n * import * as THREE from \"three\";\n * import { FastQuadric, ThreeGeometry } from \"mesh-simplifier\";\n *\n * const geometry = new THREE.TorusKnotGeometry(10);\n * const adaptedGeometry = new ThreeGeometry(geometry);\n *\n * const simplifier = new FastQuadric();\n * simplifier.simplify(adaptedGeometry);\n *\n * // Now do whatever you want with simplified geometry\n * const material = new THREE.MeshBasicMaterial();\n * const mesh = new THREE.Mesh(adaptedGeometry.simplified, material);\n */\nclass ThreeGeometry implements Geometry {\n  public originalGeometry: THREE.Geometry | THREE.BufferGeometry;\n  private _processingGeometry: THREE.Geometry;\n  private _isBufferGeometry: boolean;\n\n  constructor(geometry: THREE.Geometry | THREE.BufferGeometry) {\n    this._isBufferGeometry = (geometry as THREE.BufferGeometry).isBufferGeometry;\n    this.originalGeometry = geometry;\n\n    if (this._isBufferGeometry) {\n      this._processingGeometry = new THREE.Geometry().fromBufferGeometry(geometry as THREE.BufferGeometry);\n    } else {\n      this._processingGeometry = this.originalGeometry as THREE.Geometry;\n    }\n  }\n\n  public prepare() {\n    const geometry = this._processingGeometry;\n    geometry.mergeVertices();\n\n    return {\n      vertices: geometry.vertices.map(vec => new Vector3(vec.x, vec.y, vec.z)),\n      faces: geometry.faces.map(face => new Face3(face.a, face.b, face.c)),\n    }\n  }\n\n  public update(datas: {\n    vertices: Vector3[],\n    faces: Face3[],\n    unculledVertices: number[],\n    unculledFaces: number[],\n  }): this {\n    const { vertices, faces, unculledVertices, unculledFaces } = datas\n\n    const geometry = this._processingGeometry;\n    const faceVertexUVs = geometry.faceVertexUvs;\n    const hasUV = faceVertexUVs[0] && faceVertexUVs[0].length > 0;\n    const hasUV2 = faceVertexUVs[1] && faceVertexUVs[1].length > 0;\n\n    geometry.vertices = vertices.map(vertex => new THREE.Vector3(vertex.x, vertex.y, vertex.z));\n    geometry.faces = faces.map(face => new THREE.Face3(face.a, face.b, face.c));\n\n    if (hasUV) {\n      geometry.faceVertexUvs[0] = unculledFaces.map(faceIdx => {\n        return geometry.faceVertexUvs[0][faceIdx];\n      });\n    }\n    if (hasUV2) {\n      geometry.faceVertexUvs[1] = unculledFaces.map(faceIdx => {\n        return geometry.faceVertexUvs[1][faceIdx];\n      });\n    }\n\n    geometry.computeFaceNormals();\n\n    if (this._isBufferGeometry) {\n      const origGeo = this.originalGeometry as THREE.BufferGeometry;\n\n      const bufferGeo = new THREE.BufferGeometry().fromGeometry(geometry);\n      const hasColor = origGeo.attributes.color && origGeo.attributes.color.count > 0;\n      const hasTangent = origGeo.attributes.tangent && origGeo.attributes.tangent.count > 0;\n\n      if (!hasColor) bufferGeo.deleteAttribute(\"color\");\n      if (hasTangent && hasUV) {\n        const tangents = new Float32Array(faces.length * 12);\n\n        faces.forEach((face, faceIdx) => {\n          const faceVertices = [face.a, face.b, face.c].map(idx => geometry.vertices[idx]);\n          const faceUVs = faceVertexUVs[0][faceIdx];\n\n          const dPos0 = new THREE.Vector3().subVectors(faceVertices[1], faceVertices[0]);\n          const dPos1 = new THREE.Vector3().subVectors(faceVertices[2], faceVertices[0]);\n\n          const dUV0 = new THREE.Vector2().subVectors(faceUVs[1], faceUVs[0]);\n          const dUV1 = new THREE.Vector2().subVectors(faceUVs[2], faceUVs[0]);\n\n          const r = 1 / (dUV0.x * dUV1.y - dUV0.y * dUV1.x);\n          const tangent = dPos0.multiplyScalar(dUV1.y).sub(dPos1.multiplyScalar(dUV0.y)).multiplyScalar(r).normalize();\n\n          const faceOffset = faceIdx * 12;\n\n          [0, 1, 2].forEach(vIdx => {\n            const vertexOffset = faceOffset + vIdx * 4;\n            tangents[vertexOffset + 0] = tangent.x;\n            tangents[vertexOffset + 1] = tangent.y;\n            tangents[vertexOffset + 2] = tangent.z;\n            tangents[vertexOffset + 3] = 1;\n          });\n        });\n\n        bufferGeo.setAttribute(\"tangent\", new THREE.BufferAttribute(tangents, 4));\n      }\n\n      origGeo.copy(bufferGeo);\n    } else {\n      geometry.verticesNeedUpdate = true;\n      geometry.elementsNeedUpdate = true;\n      geometry.uvsNeedUpdate = true;\n    }\n\n    return this;\n  }\n}\n\nexport default ThreeGeometry;\n","export const THREE_STANDARD_MAPS = [\n  \"alphaMap\",\n  \"aoMap\",\n  \"bumpMap\",\n  \"displacementMap\",\n  \"emissiveMap\",\n  \"envMap\",\n  \"lightMap\",\n  \"map\",\n  \"metalnessMap\",\n  \"normalMap\",\n  // \"roughnessMap\", excluded on purpose\n];\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport * as THREE from \"three\";\nimport Adapter from \"./Adapter\";\nimport ThreeGeometry from \"~/Geometries/ThreeGeometry\";\nimport { THREE_STANDARD_MAPS } from \"~/consts\";\n\nclass ThreeAdapter<OBJ extends THREE.Object3D> implements Adapter {\n  public object: OBJ;\n\n  constructor(original: OBJ, clone: boolean = false) {\n    this.object = clone\n      ? original.clone()\n      : original;\n\n    if (clone) {\n      this._cloneMeshes(original);\n    }\n  }\n\n  public get geometries() {\n    const geometries: ThreeGeometry[] = [];\n    this.object.traverse(obj => {\n      if ((obj as THREE.Mesh).isMesh) {\n        const mesh = obj as THREE.Mesh;\n        const threeGeometry = new ThreeGeometry(mesh.geometry);\n\n        geometries.push(threeGeometry);\n      }\n    });\n\n    return geometries;\n  }\n\n  private _cloneMeshes(original: OBJ) {\n    const origMeshes: THREE.Mesh[] = [];\n    const clonedMeshes: THREE.Mesh[] = [];\n\n    original.traverse(obj => {\n      if ((obj as THREE.Mesh).isMesh) origMeshes.push(obj as THREE.Mesh);\n    });\n    this.object.traverse(obj => {\n      if ((obj as THREE.Mesh).isMesh) clonedMeshes.push(obj as THREE.Mesh);\n    });\n\n    clonedMeshes.forEach((mesh, meshIdx) => {\n      const origMesh = origMeshes[meshIdx];\n\n      mesh.geometry = mesh.geometry.clone();\n      mesh.material = Array.isArray(mesh.material)\n        ? mesh.material.map(mat => this._cloneMaterial(mat))\n        : this._cloneMaterial(mesh.material);\n\n      if ((mesh as THREE.SkinnedMesh).isSkinnedMesh) {\n        this._skinnedMeshToMesh(\n          mesh as THREE.SkinnedMesh,\n          (origMesh as THREE.SkinnedMesh).skeleton\n        );\n      }\n    });\n  }\n\n  private _cloneMaterial(mat: THREE.Material) {\n    const clonedMat = mat.clone();\n\n    if (mat.type === \"MeshStandardMaterial\") {\n      const standardMat = mat as THREE.MeshStandardMaterial;\n      THREE_STANDARD_MAPS.forEach(mapName => {\n        if (standardMat[mapName] == null) return;\n\n        const prevMat = standardMat[mapName];\n        standardMat[mapName] = standardMat[mapName].clone();\n        standardMat[mapName].needsUpdate = true;\n\n        if (mapName === \"metalnessMap\" && prevMat === standardMat.roughnessMap) {\n          standardMat.roughnessMap = standardMat.metalnessMap;\n        }\n      });\n    } else {\n      for (const property in clonedMat) {\n        if (clonedMat[property] && clonedMat[property].isTexture) {\n          clonedMat[property] = clonedMat[property].clone();\n          clonedMat[property].needsUpdate = true;\n        }\n      }\n    }\n\n    clonedMat.needsUpdate = true;\n    return clonedMat;\n  }\n\n  private _skinnedMeshToMesh(skinnedMesh: THREE.SkinnedMesh, skeleton: THREE.Skeleton) {\n    const geometry = skinnedMesh.geometry as THREE.BufferGeometry;\n    const positions = geometry.attributes.position;\n    const skinIndicies = geometry.attributes.skinIndex;\n    const skinWeights = geometry.attributes.skinWeight;\n\n    skinnedMesh.updateMatrixWorld();\n    skeleton.update();\n\n    const boneMatricies = skeleton.boneMatrices;\n    const finalMatrix = new THREE.Matrix4();\n    for (let posIdx = 0; posIdx < positions.count; posIdx++) {\n      finalMatrix.identity();\n\n      const skinned = new THREE.Vector4();\n      skinned.set(0, 0, 0, 0);\n      const skinVertex = new THREE.Vector4();\n      skinVertex.set(\n        positions.getX(posIdx),\n        positions.getY(posIdx),\n        positions.getZ(posIdx),\n        1,\n      ).applyMatrix4(skinnedMesh.bindMatrix);\n\n      const weights = [\n        skinWeights.getX(posIdx),\n        skinWeights.getY(posIdx),\n        skinWeights.getZ(posIdx),\n        skinWeights.getW(posIdx),\n      ];\n\n      const indicies = [\n        skinIndicies.getX(posIdx),\n        skinIndicies.getY(posIdx),\n        skinIndicies.getZ(posIdx),\n        skinIndicies.getW(posIdx),\n      ];\n\n      weights.forEach((weight, index) => {\n        const boneMatrix = new THREE.Matrix4().fromArray(boneMatricies, indicies[index] * 16).multiplyScalar(weight);\n        skinned.add(skinVertex.clone().applyMatrix4(boneMatrix));\n      });\n\n      const transformed = skinned.applyMatrix4(skinnedMesh.bindMatrixInverse);\n\n      positions.setXYZ(posIdx, transformed.x, transformed.y, transformed.z);\n    }\n\n    const parent = skinnedMesh.parent!;\n    const mesh = new THREE.Mesh(skinnedMesh.geometry, skinnedMesh.material).copy(skinnedMesh);\n\n    (mesh.geometry as THREE.BufferGeometry).deleteAttribute(\"skinIndex\");\n    (mesh.geometry as THREE.BufferGeometry).deleteAttribute(\"skinWeight\");\n\n    parent.remove(skinnedMesh);\n    parent.add(mesh);\n  }\n}\n\nexport default ThreeAdapter;\n"],"names":["v0","v1","v2","x","y","z","Vector3","copy","add","sub","other","_a","x1","y1","z1","x2","y2","z2","length","invLength","Math","sqrt","factor","idx","originalIndex","v","err","deleted","dirty","n","m11","m12","m13","m14","m22","m23","m24","m33","m34","m44","m","Array","set","SymmetricMatrix","a","b","c","d","concat","a11","a12","a13","a21","a22","a23","a31","a32","a33","det","p","tstart","tcount","q","border","tid","tvertex","Object","_diff","process","hrtime","_startTime","Date","now","diff","diffInMiliSeconds","_b","_c","targetPercentage","_d","aggressiveness","_triangles","_vertices","_refs","_timer","Timer","target","timer","start","geometries","forEach","geometry","_this","_process","end","_getData","triangles","vertices","refs","targetCount","triangle","deletedTriangles","deleted0","deleted1","triangleCount","iteration","_updateMesh","threshold","pow","i","t","j","i0","i1","_calculateError","splice","_flipped","_updateTriangles","_compactMesh","_setData","data","prepare","map","vertex","Vertex","faces","f","Triangle","Face3","unculledVertices","unculledFaces","update","k","ref","s","id1","id2","d1","subVectors","d2","normalize","abs","dot","cross","deletedCount","r","min","push","filter","tmp","makePlane","Ref","vcount","vids","id","ofs","idV1","idV2","result","error","_vertexError","p1","p2","p3","error1","error2","error3","dst","_isBufferGeometry","isBufferGeometry","originalGeometry","_processingGeometry","THREE","fromBufferGeometry","mergeVertices","vec","face","datas","faceVertexUVs","faceVertexUvs","hasUV","hasUV2","faceIdx","computeFaceNormals","origGeo","bufferGeo","fromGeometry","hasColor","attributes","color","count","hasTangent","tangent","deleteAttribute","tangents_1","Float32Array","faceVertices","faceUVs","dPos0","dPos1","dUV0","dUV1","multiplyScalar","faceOffset","vIdx","vertexOffset","setAttribute","verticesNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","THREE_STANDARD_MAPS","original","clone","object","_cloneMeshes","traverse","obj","isMesh","mesh","threeGeometry","ThreeGeometry","origMeshes","clonedMeshes","meshIdx","origMesh","material","isArray","mat","_cloneMaterial","isSkinnedMesh","_skinnedMeshToMesh","skeleton","clonedMat","type","standardMat_1","mapName","prevMat","needsUpdate","roughnessMap","metalnessMap","property","isTexture","skinnedMesh","positions","position","skinIndicies","skinIndex","skinWeights","skinWeight","updateMatrixWorld","boneMatricies","boneMatrices","finalMatrix","posIdx","identity","skinned","skinVertex","getX","getY","getZ","applyMatrix4","bindMatrix","weights","getW","indicies","weight","index","boneMatrix","fromArray","transformed","bindMatrixInverse","setXYZ","parent","remove"],"mappings":";;;;;;;;;;AAAA;;;;;;;AAkBE,kBAAA,CAAYA,EAAZ,EAA4BC,EAA5B,EAA4CC,EAA5C;AAAY,qBAAA,EAAA;AAAAF,MAAAA,MAAA;;;AAAgB,qBAAA,EAAA;AAAAC,MAAAA,MAAA;;;AAAgB,qBAAA,EAAA;AAAAC,MAAAA,MAAA;;;AAC1C,SAAKC,CAAL,GAASH,EAAT;AACA,SAAKI,CAAL,GAASH,EAAT;AACA,SAAKI,CAAL,GAASH,EAAT;AACD;;;;AAhBMI,EAAAA,kBAAA,GAAP,UAAkBL,EAAlB,EAA+BC,EAA/B;AACE,WAAO,IAAII,OAAJ,GAAcC,IAAd,CAAmBN,EAAnB,EAAuBO,GAAvB,CAA2BN,EAA3B,CAAP;AACD,GAFM;;AAIAI,EAAAA,kBAAA,GAAP,UAAkBL,EAAlB,EAA+BC,EAA/B;AACE,WAAO,IAAII,OAAJ,GAAcC,IAAd,CAAmBN,EAAnB,EAAuBQ,GAAvB,CAA2BP,EAA3B,CAAP;AACD,GAFM;;AAcA,cAAA,GAAP,UAAYQ,KAAZ;AACE,SAAKP,CAAL,GAASO,KAAK,CAACP,CAAf;AACA,SAAKC,CAAL,GAASM,KAAK,CAACN,CAAf;AACA,SAAKC,CAAL,GAASK,KAAK,CAACL,CAAf;AACA,WAAO,IAAP;AACD,GALM;;AAOA,aAAA,GAAP,UAAWK,KAAX;AACE,SAAKP,CAAL,IAAUO,KAAK,CAACP,CAAhB;AACA,SAAKC,CAAL,IAAUM,KAAK,CAACN,CAAhB;AACA,SAAKC,CAAL,IAAUK,KAAK,CAACL,CAAhB;AACA,WAAO,IAAP;AACD,GALM;;AAOA,aAAA,GAAP,UAAWK,KAAX;AACE,SAAKP,CAAL,IAAUO,KAAK,CAACP,CAAhB;AACA,SAAKC,CAAL,IAAUM,KAAK,CAACN,CAAhB;AACA,SAAKC,CAAL,IAAUK,KAAK,CAACL,CAAhB;AACA,WAAO,IAAP;AACD,GALM;;AAOA,aAAA,GAAP,UAAWK,KAAX;AACQ,QAAAC,SAAA;AAAA,QAAEC,SAAF;AAAA,QAASC,SAAT;AAAA,QAAgBC,SAAhB;;AACE,QAAAC,YAAA;AAAA,QAAOC,YAAP;AAAA,QAAcC,YAAd;AAER,WAAOL,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGG,EAAf,GAAoBF,EAAE,GAAGG,EAAhC;AACD,GALM;;AAOA,eAAA,GAAP,UAAaP,KAAb;AACQ,QAAAC,SAAA;AAAA,QAAEC,SAAF;AAAA,QAASC,SAAT;AAAA,QAAgBC,SAAhB;;AACE,QAAAC,YAAA;AAAA,QAAOC,YAAP;AAAA,QAAcC,YAAd;AAER,SAAKd,CAAL,GAASU,EAAE,GAAGI,EAAL,GAAUH,EAAE,GAAGE,EAAxB;AACA,SAAKZ,CAAL,GAASU,EAAE,GAAGC,EAAL,GAAUH,EAAE,GAAGK,EAAxB;AACA,SAAKZ,CAAL,GAASO,EAAE,GAAGI,EAAL,GAAUH,EAAE,GAAGE,EAAxB;AACA,WAAO,IAAP;AACD,GARM;;AAUA,mBAAA,GAAP;AACE,QAAMG,MAAM,GAAG,KAAKA,MAAL,EAAf;;AAEA,QAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,UAAMC,SAAS,GAAG,IAAID,MAAtB;AACA,WAAKf,CAAL,IAAUgB,SAAV;AACA,WAAKf,CAAL,IAAUe,SAAV;AACA,WAAKd,CAAL,IAAUc,SAAV;AACD;;AAED,WAAO,IAAP;AACD,GAXM;;AAaA,gBAAA,GAAP;AACQ,QAAAR,SAAA;AAAA,QAAER,QAAF;AAAA,QAAKC,QAAL;AAAA,QAAQC,QAAR;;AACN,WAAOe,IAAI,CAACC,IAAL,CAAUlB,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAZ,GAAgBC,CAAC,GAAGA,CAA9B,CAAP;AACD,GAHM;;AAKA,oBAAA,GAAP,UAAkBiB,MAAlB;AACE,SAAKnB,CAAL,IAAUmB,MAAV;AACA,SAAKlB,CAAL,IAAUkB,MAAV;AACA,SAAKjB,CAAL,IAAUiB,MAAV;AAEA,WAAO,IAAP;AACD,GANM;;AAOT,gBAAA;AAAC;;ACvFD;;;;;AAOA;;;AAQE,mBAAA,CAAYC,GAAZ;AACE,SAAKC,aAAL,GAAqBD,GAArB;AACA,SAAKE,CAAL,GAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAT;AACA,SAAKC,GAAL,GAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAX;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,KAAL,GAAa,KAAb;AACA,SAAKC,CAAL,GAAS,IAAIvB,OAAJ,EAAT;AACD;;AACH,iBAAA;AAAC,GAhBD;;ACPA;;;;AAKA;AACA;;;;AAcE,0BAAA,CACEwB,GADF,EACmBC,GADnB,EACoCC,GADpC,EACqDC,GADrD,EAEmBC,GAFnB,EAEoCC,GAFpC,EAEqDC,GAFrD,EAGoCC,GAHpC,EAGqDC,GAHrD,EAIqDC,GAJrD;AACE,sBAAA,EAAA;AAAAT,MAAAA,OAAA;;;AAAiB,sBAAA,EAAA;AAAAC,MAAAA,OAAA;;;AAAiB,sBAAA,EAAA;AAAAC,MAAAA,OAAA;;;AAAiB,sBAAA,EAAA;AAAAC,MAAAA,OAAA;;;AAClC,sBAAA,EAAA;AAAAC,MAAAA,OAAA;;;AAAiB,sBAAA,EAAA;AAAAC,MAAAA,OAAA;;;AAAiB,sBAAA,EAAA;AAAAC,MAAAA,OAAA;;;AACjB,sBAAA,EAAA;AAAAC,MAAAA,OAAA;;;AAAiB,sBAAA,EAAA;AAAAC,MAAAA,OAAA;;;AACA,sBAAA,EAAA;AAAAC,MAAAA,OAAA;;;AAEnD,SAAKC,CAAL,GAAS,IAAIC,KAAJ,CAAU,EAAV,CAAT;AACA,SAAKC,GAAL,CAASZ,GAAT,EAAcC,GAAd,EAAmBC,GAAnB,EAAwBC,GAAxB,EAA6BC,GAA7B,EAAkCC,GAAlC,EAAuCC,GAAvC,EAA4CC,GAA5C,EAAiDC,GAAjD,EAAsDC,GAAtD;AACD;;;;AAnBMI,EAAAA,yBAAA,GAAP,UAAiBC,CAAjB,EAA4BC,CAA5B,EAAuCC,CAAvC,EAAkDC,CAAlD;AACE,WAAO,IAAIJ,eAAJ,CACLC,CAAC,GAAGA,CADC,EACEA,CAAC,GAAGC,CADN,EACSD,CAAC,GAAGE,CADb,EACgBF,CAAC,GAAGG,CADpB,EAEEF,CAAC,GAAGA,CAFN,EAESA,CAAC,GAAGC,CAFb,EAEgBD,CAAC,GAAGE,CAFpB,EAGSD,CAAC,GAAGA,CAHb,EAGgBA,CAAC,GAAGC,CAHpB,EAIgBA,CAAC,GAAGA,CAJpB,CAAP;AAMD,GAPM;;AAqBA,cAAA,GAAP,UAAYrC,KAAZ;AACE,QAAM8B,CAAC,GAAG9B,KAAK,CAAC8B,CAAhB;AACA,SAAKA,CAAL,GAASA,CAAC,CAACQ,MAAF,EAAT;AACA,WAAO,IAAP;AACD,GAJM;;AAMA,aAAA,GAAP,UACElB,GADF,EACeC,GADf,EAC4BC,GAD5B,EACyCC,GADzC,EAEeC,GAFf,EAE4BC,GAF5B,EAEyCC,GAFzC,EAG4BC,GAH5B,EAGyCC,GAHzC,EAIyCC,GAJzC;AAME,QAAMC,CAAC,GAAG,KAAKA,CAAf;AACAA,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAOV,GAAP;AAAYU,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAOT,GAAP;AAAYS,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAOR,GAAP;AAAYQ,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAOP,GAAP;AACxBO,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAON,GAAP;AAAYM,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAOL,GAAP;AAAYK,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAOJ,GAAP;AACZI,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAOH,GAAP;AAAYG,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAOF,GAAP;AACAE,IAAAA,CAAC,CAAC,CAAD,CAAD,GAAOD,GAAP;AACrC,GAXM;;AAaA,aAAA,GAAP,UACEU,GADF,EACeC,GADf,EAC4BC,GAD5B,EAEEC,GAFF,EAEeC,GAFf,EAE4BC,GAF5B,EAGEC,GAHF,EAGeC,GAHf,EAG4BC,GAH5B;AAKE,QAAMjB,CAAC,GAAG,KAAKA,CAAf;AACA,QAAMkB,GAAG,GAAGlB,CAAC,CAACS,GAAD,CAAD,GAAST,CAAC,CAACa,GAAD,CAAV,GAAkBb,CAAC,CAACiB,GAAD,CAAnB,GACRjB,CAAC,CAACW,GAAD,CAAD,GAASX,CAAC,CAACY,GAAD,CAAV,GAAkBZ,CAAC,CAACgB,GAAD,CADX,GAERhB,CAAC,CAACU,GAAD,CAAD,GAASV,CAAC,CAACc,GAAD,CAAV,GAAkBd,CAAC,CAACe,GAAD,CAFX,GAGRf,CAAC,CAACW,GAAD,CAAD,GAASX,CAAC,CAACa,GAAD,CAAV,GAAkBb,CAAC,CAACe,GAAD,CAHX,GAIRf,CAAC,CAACS,GAAD,CAAD,GAAST,CAAC,CAACc,GAAD,CAAV,GAAkBd,CAAC,CAACgB,GAAD,CAJX,GAKRhB,CAAC,CAACU,GAAD,CAAD,GAASV,CAAC,CAACY,GAAD,CAAV,GAAkBZ,CAAC,CAACiB,GAAD,CALvB;AAMA,WAAOC,GAAP;AACD,GAbM;;AAeA,aAAA,GAAP,UAAWhD,KAAX;AACE,QAAM8B,CAAC,GAAG,KAAKA,CAAf;AACA,QAAMX,CAAC,GAAGnB,KAAK,CAAC8B,CAAhB;AACA,SAAKE,GAAL,CACEF,CAAC,CAAC,CAAD,CAAD,GAAOX,CAAC,CAAC,CAAD,CADV,EACeW,CAAC,CAAC,CAAD,CAAD,GAAOX,CAAC,CAAC,CAAD,CADvB,EAC4BW,CAAC,CAAC,CAAD,CAAD,GAAOX,CAAC,CAAC,CAAD,CADpC,EACyCW,CAAC,CAAC,CAAD,CAAD,GAAOX,CAAC,CAAC,CAAD,CADjD,EAEeW,CAAC,CAAC,CAAD,CAAD,GAAOX,CAAC,CAAC,CAAD,CAFvB,EAE4BW,CAAC,CAAC,CAAD,CAAD,GAAOX,CAAC,CAAC,CAAD,CAFpC,EAEyCW,CAAC,CAAC,CAAD,CAAD,GAAOX,CAAC,CAAC,CAAD,CAFjD,EAG4BW,CAAC,CAAC,CAAD,CAAD,GAAOX,CAAC,CAAC,CAAD,CAHpC,EAGyCW,CAAC,CAAC,CAAD,CAAD,GAAOX,CAAC,CAAC,CAAD,CAHjD,EAIyCW,CAAC,CAAC,CAAD,CAAD,GAAOX,CAAC,CAAC,CAAD,CAJjD;AAOA,WAAO,IAAP;AACD,GAXM;;AAYT,wBAAA;AAAC;;AC5ED;;;;;AAQA;;;AAQE,iBAAA,CAAYN,GAAZ;AACE,SAAKC,aAAL,GAAqBD,GAArB;AACA,SAAKoC,CAAL,GAAS,IAAIrD,OAAJ,EAAT;AACA,SAAKsD,MAAL,GAAc,CAAd;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,CAAL,GAAS,IAAInB,eAAJ,EAAT;AACA,SAAKoB,MAAL,GAAc,KAAd;AACD;;AACH,eAAA;AAAC,GAhBD;;ACRA;;;;AAKA;;;AAIE,cAAA;AACE,SAAKC,GAAL,GAAW,CAAX;AACA,SAAKC,OAAL,GAAe,CAAf;AACD;;AACH,YAAA;AAAC,GARD;;ACLA;;;;;;;AAWE,gBAAA,CACSrB,CADT,EAESC,CAFT,EAGSC,CAHT;AACS,UAAA,GAAAF,CAAA;AACA,UAAA,GAAAC,CAAA;AACA,UAAA,GAAAC,CAAA;AACL;;AACN,cAAA;AAAC;;AChBD;;;;AAKA;;;AAAA,gBAAA;AACU,cAAA,GAAgB,CAAhB;AACA,mBAAA,GAA+C,IAA/C;AAgCT;;;AA3BCoB,EAAAA,qBAAA,gBAAA;AAHA;;;SAGA;AAAoB,aAAO,KAAKC,KAAZ;AAAoB;;;GAAxC;;AAEO,eAAA,GAAP;AACE,QAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,CAACC,MAA9C,EAAsD;AACpD;AACA,WAAKC,UAAL,GAAkBF,OAAO,CAACC,MAAR,EAAlB;AACD,KAHD,MAGO;AACL,WAAKC,UAAL,GAAkBC,IAAI,CAACC,GAAL,EAAlB;AACD;AACF,GAPM;;AASA,aAAA,GAAP;AACE;AACA,QAAI,KAAKF,UAAL,IAAmB,IAAvB,EAA6B;;AAE7B,QAAI,OAAOF,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,CAACC,MAA9C,EAAsD;AACpD;AACA,UAAMI,IAAI,GAAGL,OAAO,CAACC,MAAR,CAAe,KAAKC,UAApB,CAAb;AACA,UAAMI,iBAAiB,GAAG,QAAQD,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAJ,GAAU,IAA5B,CAA1B,CAHoD;;AAKpD,WAAKN,KAAL,GAAaO,iBAAb;AACD,KAND,MAMO;AACL,WAAKP,KAAL,GAAaI,IAAI,CAACC,GAAL,KAAc,KAAKF,UAAhC;AACD;;AAED,SAAKA,UAAL,GAAkB,IAAlB;AACD,GAfM;;AAgBT,cAAA;AAAC,GAlCD;;ACLA;;;;;;;;;;AA8BE,sBAAA,CAAY3D,EAAZ;QAAYgE;QACVC;QAAAC;QACAC;QAAAC;;AAEA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKL,gBAAL,GAAwBA,gBAAxB;AACA,SAAKE,cAAL,GAAsBA,cAAtB;AACA,SAAKI,MAAL,GAAc,IAAIC,KAAJ,EAAd;AACD;;;AAZDlB,EAAAA,qBAAA,wBAAA;SAAA;AAA4B,aAAO,KAAKiB,MAAL,CAAYV,IAAnB;AAA0B;;;GAAtD;;AAcO,kBAAA,GAAP,UAAgBY,MAAhB;AAAA,oBAAA;;AACE,QAAMC,KAAK,GAAG,KAAKH,MAAnB;AACAG,IAAAA,KAAK,CAACC,KAAN;;AAEA,QAAKF,MAAkB,CAACG,UAAxB,EAAoC;AACjCH,MAAAA,MAAkB,CAACG,UAAnB,CAA8BC,OAA9B,CAAsC,UAAAC,QAAA;AACrCC,QAAAA,KAAI,CAACC,QAAL,CAAcF,QAAd;AACD,OAFA;AAGF,KAJD,MAIO;AACL,WAAKE,QAAL,CAAcP,MAAd;AACD;;AAEDC,IAAAA,KAAK,CAACO,GAAN;AAEA,WAAO,IAAP;AACD,GAfM;;AAiBC,kBAAA,GAAR,UAAiBH,QAAjB;AACE,SAAKI,QAAL,CAAcJ,QAAd;;AAEA,QAAMK,SAAS,GAAG,KAAKf,UAAvB;AACA,QAAMgB,QAAQ,GAAG,KAAKf,SAAtB;AACA,QAAMgB,IAAI,GAAG,KAAKf,KAAlB;AACA,QAAML,gBAAgB,GAAG,KAAKA,gBAA9B;AACA,QAAME,cAAc,GAAG,KAAKA,cAA5B;AAEA,QAAMmB,WAAW,GAAG,KAAKlB,UAAL,CAAgB9D,MAAhB,GAAyB2D,gBAA7C;AAEAkB,IAAAA,SAAS,CAACN,OAAV,CAAkB,UAAAU,QAAA;AAAY,aAAAA,QAAQ,CAACxE,OAAT,GAAmB,KAAnB;AAAwB,KAAtD;AAEA,QAAIyE,gBAAgB,GAAW,CAA/B;AACA,QAAMC,QAAQ,GAAc,EAA5B;AACA,QAAMC,QAAQ,GAAc,EAA5B;AACA,QAAMC,aAAa,GAAGR,SAAS,CAAC7E,MAAhC;;AAEA,SAAK,IAAIsF,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAG,GAApC,EAAyCA,SAAS,EAAlD,EAAsD;AACpD;AACA,UAAID,aAAa,GAAGH,gBAAhB,IAAoCF,WAAxC,EAAqD,MAFD;;AAKvD,UAAIM,SAAS,GAAG,CAAZ,KAAkB,CAAtB,EAAyB;AACxB,aAAKC,WAAL,CAAiBD,SAAjB;AACG,OAPmD;;;AAUpDT,MAAAA,SAAS,CAACN,OAAV,CAAkB,UAAAU,QAAA;AAAY,eAAAA,QAAQ,CAACvE,KAAT,GAAiB,KAAjB;AAAsB,OAApD,EAVoD;AAavD;AACA;AACA;AACA;AACG;;AACA,UAAM8E,SAAS,GAAG,cAActF,IAAI,CAACuF,GAAL,CAASH,SAAS,GAAG,CAArB,EAAwBzB,cAAxB,CAAhC;;AAEA,WAAK,IAAI6B,CAAC,GAAGb,SAAS,CAAC7E,MAAV,GAAmB,CAAhC,EAAmC0F,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;AAC9C,YAAMC,CAAC,GAAGd,SAAS,CAACa,CAAD,CAAnB;AACA,YAAIC,CAAC,CAACnF,GAAF,CAAM,CAAN,IAAWgF,SAAX,IAAwBG,CAAC,CAAClF,OAA1B,IAAqCkF,CAAC,CAACjF,KAA3C,EAAkD;;AAElD,aAAK,IAAIkF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,cAAID,CAAC,CAACnF,GAAF,CAAMoF,CAAN,IAAWJ,SAAf,EAA0B;AACxB,gBAAMK,EAAE,GAAGF,CAAC,CAACpF,CAAF,CAAIqF,CAAJ,CAAX;AACA,gBAAME,EAAE,GAAGH,CAAC,CAACpF,CAAF,CAAI,CAACqF,CAAC,GAAG,CAAL,IAAU,CAAd,CAAX;AAEA,gBAAM9G,EAAE,GAAGgG,QAAQ,CAACe,EAAD,CAAnB;AACA,gBAAM9G,EAAE,GAAG+F,QAAQ,CAACgB,EAAD,CAAnB,CALwB;;AAQxB,gBAAIhH,EAAE,CAAC+D,MAAH,IAAa9D,EAAE,CAAC8D,MAApB,EAA4B,SARJ;;AAWxB,gBAAMJ,CAAC,GAAG,IAAIrD,OAAJ,EAAV;;AACA,iBAAK2G,eAAL,CAAqBF,EAArB,EAAyBC,EAAzB,EAA6BrD,CAA7B;;AAEA0C,YAAAA,QAAQ,CAACa,MAAT,CAAgB,CAAhB,EAdwB;;AAexBZ,YAAAA,QAAQ,CAACY,MAAT,CAAgB,CAAhB,EAfwB;AAiBxB;;AACA,gBAAI,KAAKC,QAAL,CAAcxD,CAAd,EAAiBqD,EAAjB,EAAqBhH,EAArB,EAAyBqG,QAAzB,CAAJ,EAAwC;AACxC,gBAAI,KAAKc,QAAL,CAAcxD,CAAd,EAAiBoD,EAAjB,EAAqB9G,EAArB,EAAyBqG,QAAzB,CAAJ,EAAwC,SAnBhB;;AAsBxBtG,YAAAA,EAAE,CAAC2D,CAAH,GAAOA,CAAP;AACA3D,YAAAA,EAAE,CAAC8D,CAAH,CAAKtD,GAAL,CAASP,EAAE,CAAC6D,CAAZ;AAEA,gBAAMF,MAAM,GAAGqC,IAAI,CAAC/E,MAApB;AAEAkF,YAAAA,gBAAgB,IAAI,KAAKgB,gBAAL,CAAsBL,EAAtB,EAA0B/G,EAA1B,EAA8BqG,QAA9B,CAApB;AACAD,YAAAA,gBAAgB,IAAI,KAAKgB,gBAAL,CAAsBL,EAAtB,EAA0B9G,EAA1B,EAA8BqG,QAA9B,CAApB;AAEA,gBAAMzC,MAAM,GAAGoC,IAAI,CAAC/E,MAAL,GAAc0C,MAA7B;AAEA5D,YAAAA,EAAE,CAAC4D,MAAH,GAAYA,MAAZ;AACA5D,YAAAA,EAAE,CAAC6D,MAAH,GAAYA,MAAZ;AACA;AACD;AACF,SAzC6C;;;AA4C9C,YAAI0C,aAAa,GAAGH,gBAAhB,IAAoCF,WAAxC,EAAqD;AACtD;AACF;;AAED,SAAKmB,YAAL;;AAEA,SAAKC,QAAL,CAAc5B,QAAd;AACD,GAzFO;;AA2FA,kBAAA,GAAR,UAAiBA,QAAjB;AACE,QAAM6B,IAAI,GAAG7B,QAAQ,CAAC8B,OAAT,EAAb;AAEA,SAAKvC,SAAL,GAAiBsC,IAAI,CAACvB,QAAL,CAAcyB,GAAd,CAAkB,UAAChG,CAAD,EAAIF,GAAJ;AACjC,UAAMmG,MAAM,GAAG,IAAIC,MAAJ,CAAWpG,GAAX,CAAf;AACAmG,MAAAA,MAAM,CAAC/D,CAAP,CAASpD,IAAT,CAAckB,CAAd;AACA,aAAOiG,MAAP;AACD,KAJgB,CAAjB;AAMA,SAAK1C,UAAL,GAAkBuC,IAAI,CAACK,KAAL,CAAWH,GAAX,CAAe,UAACI,CAAD,EAAItG,GAAJ;AAC/B,UAAM4E,QAAQ,GAAG,IAAI2B,QAAJ,CAAavG,GAAb,CAAjB;AACA4E,MAAAA,QAAQ,CAAC1E,CAAT,GAAa,CAACoG,CAAC,CAACjF,CAAH,EAAMiF,CAAC,CAAChF,CAAR,EAAWgF,CAAC,CAAC/E,CAAb,CAAb;AACA,aAAOqD,QAAP;AACD,KAJiB,CAAlB;AAMA,SAAKjB,KAAL,GAAa,EAAb;AACD,GAhBO;;AAkBA,kBAAA,GAAR,UAAiBQ,QAAjB;AACE,QAAMK,SAAS,GAAG,KAAKf,UAAvB;;AAEA,QAAMgB,QAAQ,GAAG,KAAKf,SAAL,CAAewC,GAAf,CAAmB,UAAAC,MAAA;AAAU,aAAAA,MAAM,CAAC/D,CAAP;AAAQ,KAArC,CAAjB;;AACA,QAAMiE,KAAK,GAAG7B,SAAS,CAAC0B,GAAV,CAAc,UAAAtB,QAAA;AAC1B,UAAM1E,CAAC,GAAG0E,QAAQ,CAAC1E,CAAnB;AACA,aAAO,IAAIsG,KAAJ,CAAUtG,CAAC,CAAC,CAAD,CAAX,EAAgBA,CAAC,CAAC,CAAD,CAAjB,EAAsBA,CAAC,CAAC,CAAD,CAAvB,CAAP;AACD,KAHa,CAAd;;AAKA,QAAMuG,gBAAgB,GAAG,KAAK/C,SAAL,CAAewC,GAAf,CAAmB,UAAAhG,CAAA;AAAK,aAAAA,CAAC,CAACD,aAAF;AAAe,KAAvC,CAAzB;;AACA,QAAMyG,aAAa,GAAG,KAAKjD,UAAL,CAAgByC,GAAhB,CAAoB,UAAAI,CAAA;AAAK,aAAAA,CAAC,CAACrG,aAAF;AAAe,KAAxC,CAAtB;;AAEAkE,IAAAA,QAAQ,CAACwC,MAAT,CAAgB;AACdlC,MAAAA,QAAQ,UADM;AAEd4B,MAAAA,KAAK,OAFS;AAGdI,MAAAA,gBAAgB,kBAHF;AAIdC,MAAAA,aAAa;AAJC,KAAhB;AAMD,GAlBO;;AAoBA,kBAAA,GAAR,UAAiBtE,CAAjB,EAA6BiD,CAA7B,EAAwCnF,CAAxC,EAAmDE,OAAnD;AACE,QAAMoE,SAAS,GAAG,KAAKf,UAAvB;AACA,QAAMgB,QAAQ,GAAG,KAAKf,SAAtB;AACA,QAAMgB,IAAI,GAAG,KAAKf,KAAlB;;AAEA,SAAK,IAAIiD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1G,CAAC,CAACoC,MAAtB,EAA8BsE,CAAC,EAA/B,EAAmC;AACjC,UAAMC,GAAG,GAAGnC,IAAI,CAACxE,CAAC,CAACmC,MAAF,GAAWuE,CAAZ,CAAhB;AACA,UAAMtB,CAAC,GAAGd,SAAS,CAACqC,GAAG,CAACpE,GAAL,CAAnB;AACA,UAAI6C,CAAC,CAAClF,OAAN,EAAe;AAEf,UAAM0G,CAAC,GAAGD,GAAG,CAACnE,OAAd;AACA,UAAMqE,GAAG,GAAGzB,CAAC,CAACpF,CAAF,CAAI,CAAC4G,CAAC,GAAG,CAAL,IAAU,CAAd,CAAZ;AACA,UAAME,GAAG,GAAG1B,CAAC,CAACpF,CAAF,CAAI,CAAC4G,CAAC,GAAG,CAAL,IAAU,CAAd,CAAZ;;AAEA,UAAIC,GAAG,KAAK1B,CAAR,IAAa2B,GAAG,KAAK3B,CAAzB,EAA4B;AAC1BjF,QAAAA,OAAO,CAACwG,CAAD,CAAP,GAAa,IAAb;AACA;AACD;;AAED,UAAMK,EAAE,GAAGlI,OAAO,CAACmI,UAAR,CAAmBzC,QAAQ,CAACsC,GAAD,CAAR,CAAc3E,CAAjC,EAAoCA,CAApC,CAAX;AACA,UAAM+E,EAAE,GAAGpI,OAAO,CAACmI,UAAR,CAAmBzC,QAAQ,CAACuC,GAAD,CAAR,CAAc5E,CAAjC,EAAoCA,CAApC,CAAX;AACA6E,MAAAA,EAAE,CAACG,SAAH;AACAD,MAAAA,EAAE,CAACC,SAAH;AAEA,UAAIvH,IAAI,CAACwH,GAAL,CAASJ,EAAE,CAACK,GAAH,CAAOH,EAAP,CAAT,IAAuB,KAA3B,EAAkC,OAAO,IAAP;AAElC,UAAM7G,CAAC,GAAG,IAAIvB,OAAJ,GAAcC,IAAd,CAAmBiI,EAAnB,EAAuBM,KAAvB,CAA6BJ,EAA7B,CAAV;AACA7G,MAAAA,CAAC,CAAC8G,SAAF;AACAhH,MAAAA,OAAO,CAACwG,CAAD,CAAP,GAAa,KAAb;AACA,UAAItG,CAAC,CAACgH,GAAF,CAAMhC,CAAC,CAAChF,CAAR,IAAa,GAAjB,EAAsB,OAAO,IAAP;AACvB;;AACD,WAAO,KAAP;AACD,GAhCO;;AAkCA,0BAAA,GAAR,UAAyB+E,CAAzB,EAAoCnF,CAApC,EAA+CE,OAA/C;AACE,QAAMoE,SAAS,GAAG,KAAKf,UAAvB;AACA,QAAMiB,IAAI,GAAG,KAAKf,KAAlB;AACA,QAAMvB,CAAC,GAAG,IAAIrD,OAAJ,EAAV;AAEA,QAAIyI,YAAY,GAAG,CAAnB;;AACA,SAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1G,CAAC,CAACoC,MAAtB,EAA8BsE,CAAC,EAA/B,EAAmC;AACjC,UAAMa,CAAC,GAAG/C,IAAI,CAACxE,CAAC,CAACmC,MAAF,GAAWuE,CAAZ,CAAd;AACA,UAAMtB,CAAC,GAAGd,SAAS,CAACiD,CAAC,CAAChF,GAAH,CAAnB;AAEA,UAAI6C,CAAC,CAAClF,OAAN,EAAe;;AACf,UAAIA,OAAO,CAACwG,CAAD,CAAX,EAAgB;AACdtB,QAAAA,CAAC,CAAClF,OAAF,GAAY,IAAZ;AACAoH,QAAAA,YAAY;AACZ;AACD;;AAEDlC,MAAAA,CAAC,CAACpF,CAAF,CAAIuH,CAAC,CAAC/E,OAAN,IAAiB2C,CAAjB;AACAC,MAAAA,CAAC,CAACjF,KAAF,GAAU,IAAV;AACAiF,MAAAA,CAAC,CAACnF,GAAF,CAAM,CAAN,IAAW,KAAKuF,eAAL,CAAqBJ,CAAC,CAACpF,CAAF,CAAI,CAAJ,CAArB,EAA6BoF,CAAC,CAACpF,CAAF,CAAI,CAAJ,CAA7B,EAAqCkC,CAArC,CAAX;AACAkD,MAAAA,CAAC,CAACnF,GAAF,CAAM,CAAN,IAAW,KAAKuF,eAAL,CAAqBJ,CAAC,CAACpF,CAAF,CAAI,CAAJ,CAArB,EAA6BoF,CAAC,CAACpF,CAAF,CAAI,CAAJ,CAA7B,EAAqCkC,CAArC,CAAX;AACAkD,MAAAA,CAAC,CAACnF,GAAF,CAAM,CAAN,IAAW,KAAKuF,eAAL,CAAqBJ,CAAC,CAACpF,CAAF,CAAI,CAAJ,CAArB,EAA6BoF,CAAC,CAACpF,CAAF,CAAI,CAAJ,CAA7B,EAAqCkC,CAArC,CAAX;AACAkD,MAAAA,CAAC,CAACnF,GAAF,CAAM,CAAN,IAAWN,IAAI,CAAC6H,GAAL,CAASpC,CAAC,CAACnF,GAAF,CAAM,CAAN,CAAT,EAAmBmF,CAAC,CAACnF,GAAF,CAAM,CAAN,CAAnB,EAA6BmF,CAAC,CAACnF,GAAF,CAAM,CAAN,CAA7B,CAAX;AACAuE,MAAAA,IAAI,CAACiD,IAAL,CAAUF,CAAV;AACD;;AAED,WAAOD,YAAP;AACD,GA3BO;;AA6BA,qBAAA,GAAR,UAAoBvC,SAApB;AAAA,oBAAA;;AACE,QAAMR,QAAQ,GAAG,KAAKf,SAAtB;AACA,QAAMgB,IAAI,GAAG,KAAKf,KAAlB;;AAEF,QAAIsB,SAAS,GAAG,CAAhB,EAAmB;AACf;AACA,WAAKxB,UAAL,GAAkB,KAAKA,UAAL,CAAgBmE,MAAhB,CAAuB,UAAAhD,QAAA;AAAY,eAAA,CAACA,QAAQ,CAACxE,OAAV;AAAiB,OAApD,CAAlB;AACH,KAHD,MAGO;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACAqE,MAAAA,QAAQ,CAACP,OAAT,CAAiB,UAAAiC,MAAA;AAAU,eAAAA,MAAM,CAAC5D,CAAP,GAAW,IAAInB,eAAJ,EAAX;AAAgC,OAA3D;;AAEA,WAAKqC,UAAL,CAAgBS,OAAhB,CAAwB,UAAAoB,CAAA;AACtB,YAAMlD,CAAC,GAAGkD,CAAC,CAACpF,CAAF,CAAIgG,GAAJ,CAAQ,UAAAhG,CAAA;AAAK,iBAAAuE,QAAQ,CAACvE,CAAD,CAAR,CAAYkC,CAAZ;AAAa,SAA1B,CAAV;AACA,YAAM9B,CAAC,GAAGvB,OAAO,CAACmI,UAAR,CAAmB9E,CAAC,CAAC,CAAD,CAApB,EAAyBA,CAAC,CAAC,CAAD,CAA1B,EACPmF,KADO,CACDxI,OAAO,CAACmI,UAAR,CAAmB9E,CAAC,CAAC,CAAD,CAApB,EAAyBA,CAAC,CAAC,CAAD,CAA1B,CADC,EAEPgF,SAFO,EAAV;AAIA9B,QAAAA,CAAC,CAAChF,CAAF,GAAMA,CAAN;AACA,YAAMuH,GAAG,GAAGzG,eAAe,CAAC0G,SAAhB,CAA0BxH,CAAC,CAAC1B,CAA5B,EAA+B0B,CAAC,CAACzB,CAAjC,EAAoCyB,CAAC,CAACxB,CAAtC,EAAyC,CAACwB,CAAC,CAACgH,GAAF,CAAMlF,CAAC,CAAC,CAAD,CAAP,CAA1C,CAAZ;AAEAkD,QAAAA,CAAC,CAACpF,CAAF,CAAIgE,OAAJ,CAAY,UAAAhE,CAAA;AAAK,iBAAAuE,QAAQ,CAACvE,CAAD,CAAR,CAAYqC,CAAZ,CAActD,GAAd,CAAkB4I,GAAlB,CAAA;AAAsB,SAAvC;AACD,OAVD;;AAYA,WAAKpE,UAAL,CAAgBS,OAAhB,CAAwB,UAAAoB,CAAA;AACtB,YAAMlD,CAAC,GAAG,IAAIrD,OAAJ,EAAV;AACAuG,QAAAA,CAAC,CAACpF,CAAF,CAAIgE,OAAJ,CAAY,UAAChE,CAAD,EAAImF,CAAJ;AACVC,UAAAA,CAAC,CAACnF,GAAF,CAAMkF,CAAN,IAAWjB,KAAI,CAACsB,eAAL,CAAqBxF,CAArB,EAAwBoF,CAAC,CAACpF,CAAF,CAAI,CAACmF,CAAC,GAAG,CAAL,IAAU,CAAd,CAAxB,EAA0CjD,CAA1C,CAAX;AACD,SAFD;AAGD,OALD;AAMD;;;AAGDqC,IAAAA,QAAQ,CAACP,OAAT,CAAiB,UAAAiC,MAAA;AACfA,MAAAA,MAAM,CAAC9D,MAAP,GAAgB,CAAhB;AACA8D,MAAAA,MAAM,CAAC7D,MAAP,GAAgB,CAAhB;AACD,KAHD;AAKA,QAAMkC,SAAS,GAAG,KAAKf,UAAvB;AACAe,IAAAA,SAAS,CAACN,OAAV,CAAkB,UAAAU,QAAA;AAChBA,MAAAA,QAAQ,CAAC1E,CAAT,CAAWgE,OAAX,CAAmB,UAAAhE,CAAA;AAAK,eAAAuE,QAAQ,CAACvE,CAAD,CAAR,CAAYoC,MAAZ,EAAA;AAAoB,OAA5C;AACD,KAFD;AAIA,QAAID,MAAM,GAAG,CAAb;AACAoC,IAAAA,QAAQ,CAACP,OAAT,CAAiB,UAAAhE,CAAA;AACfA,MAAAA,CAAC,CAACmC,MAAF,GAAWA,MAAX;AACAA,MAAAA,MAAM,IAAInC,CAAC,CAACoC,MAAZ;AACApC,MAAAA,CAAC,CAACoC,MAAF,GAAW,CAAX;AACD,KAJD;;AAOA,SAAK,IAAI+C,CAAC,GAAGX,IAAI,CAAC/E,MAAlB,EAA0B0F,CAAC,GAAGb,SAAS,CAAC7E,MAAV,GAAmB,CAAjD,EAAoD0F,CAAC,EAArD,EAAyD;AAC1DX,MAAAA,IAAI,CAACW,CAAD,CAAJ,GAAU,IAAI0C,GAAJ,EAAV;AACA;;AAECvD,IAAAA,SAAS,CAACN,OAAV,CAAkB,UAACoB,CAAD,EAAID,CAAJ;AAChB,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAMrF,CAAC,GAAGuE,QAAQ,CAACa,CAAC,CAACpF,CAAF,CAAIqF,CAAJ,CAAD,CAAlB;AACAb,QAAAA,IAAI,CAACxE,CAAC,CAACmC,MAAF,GAAWnC,CAAC,CAACoC,MAAd,CAAJ,CAA0BG,GAA1B,GAAgC4C,CAAhC;AACAX,QAAAA,IAAI,CAACxE,CAAC,CAACmC,MAAF,GAAWnC,CAAC,CAACoC,MAAd,CAAJ,CAA0BI,OAA1B,GAAoC6C,CAApC;AACArF,QAAAA,CAAC,CAACoC,MAAF;AACD;AACF,KAPD;;AAUF,QAAI2C,SAAS,KAAK,CAAlB,EAAqB;AACjBR,MAAAA,QAAQ,CAACP,OAAT,CAAiB,UAAAiC,MAAA;AAAU,eAAAA,MAAM,CAAC3D,MAAP,GAAgB,KAAhB;AAAqB,OAAhD;AACAiC,MAAAA,QAAQ,CAACP,OAAT,CAAiB,UAAAhE,CAAA;AACf;AACA,YAAM8H,MAAM,GAAa,EAAzB;AACA,YAAMC,IAAI,GAAa,EAAvB;;AAEA,aAAK,IAAI5C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnF,CAAC,CAACoC,MAAtB,EAA8B+C,CAAC,EAA/B,EAAmC;AACjC,cAAMuB,CAAC,GAAGlC,IAAI,CAACxE,CAAC,CAACmC,MAAF,GAAWgD,CAAZ,CAAJ,CAAmB5C,GAA7B;AACA,cAAM6C,CAAC,GAAGd,SAAS,CAACoC,CAAD,CAAnB;;AAEA,eAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,gBAAM2C,EAAE,GAAG5C,CAAC,CAACpF,CAAF,CAAIqF,CAAJ,CAAX;AACA,gBAAI4C,GAAG,GAAG,CAAV;;AAEA,mBAAOA,GAAG,GAAGH,MAAM,CAACrI,MAApB,EAA4B;AAC1B,kBAAIsI,IAAI,CAACE,GAAD,CAAJ,KAAcD,EAAlB,EAAsB;AACtBC,cAAAA,GAAG;AACJ;;AAED,gBAAIA,GAAG,KAAKH,MAAM,CAACrI,MAAnB,EAA2B;AACzBqI,cAAAA,MAAM,CAACL,IAAP,CAAY,CAAZ;AACAM,cAAAA,IAAI,CAACN,IAAL,CAAUO,EAAV;AACD,aAHD,MAGO;AACLF,cAAAA,MAAM,CAACG,GAAD,CAAN;AACD;AACF;AACF;;AAED,aAAK,IAAI5C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyC,MAAM,CAACrI,MAA3B,EAAmC4F,CAAC,EAApC,EAAwC;AACtC,cAAIyC,MAAM,CAACzC,CAAD,CAAN,KAAc,CAAlB,EAAqB;AACnBd,YAAAA,QAAQ,CAACwD,IAAI,CAAC1C,CAAD,CAAL,CAAR,CAAkB/C,MAAlB,GAA2B,IAA3B;AACD;AACF;AACF,OAhCD;AAiCH;AACA,GA1GO;;;AA6GA,yBAAA,GAAR,UAAwB4F,IAAxB,EAAsCC,IAAtC,EAAoDC,MAApD;AACE;AACA,QAAM7D,QAAQ,GAAG,KAAKf,SAAtB;AACA,QAAMhF,EAAE,GAAG+F,QAAQ,CAAC2D,IAAD,CAAnB;AACA,QAAMzJ,EAAE,GAAG8F,QAAQ,CAAC4D,IAAD,CAAnB;AACA,QAAM9F,CAAC,GAAG,IAAInB,eAAJ,GAAsBpC,IAAtB,CAA2BN,EAAE,CAAC6D,CAA9B,EAAiCtD,GAAjC,CAAqCN,EAAE,CAAC4D,CAAxC,CAAV;AACA,QAAMC,MAAM,GAAG9D,EAAE,CAAC8D,MAAH,IAAa7D,EAAE,CAAC6D,MAA/B;AACA,QAAML,GAAG,GAAGI,CAAC,CAACJ,GAAF,CAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAAZ;AAEA,QAAIoG,KAAK,GAAW,CAApB;;AAEA,QAAIpG,GAAG,KAAK,CAAR,IAAa,CAACK,MAAlB,EAA0B;AACxB;AACA8F,MAAAA,MAAM,CAAC1J,CAAP,GAAW,CAAC,CAAD,GAAKuD,GAAL,GAAYI,CAAC,CAACJ,GAAF,CAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAAvB,CAFwB;;AAGxBmG,MAAAA,MAAM,CAACzJ,CAAP,GAAY,IAAIsD,GAAJ,GAAWI,CAAC,CAACJ,GAAF,CAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAAvB,CAHwB;;AAIxBmG,MAAAA,MAAM,CAACxJ,CAAP,GAAW,CAAC,CAAD,GAAKqD,GAAL,GAAYI,CAAC,CAACJ,GAAF,CAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAAvB,CAJwB;;AAKxBoG,MAAAA,KAAK,GAAG,KAAKC,YAAL,CAAkBjG,CAAlB,EAAqB+F,MAArB,CAAR;AACD,KAND,MAMO;AACL,UAAMG,EAAE,GAAG/J,EAAE,CAAC0D,CAAd;AACA,UAAMsG,EAAE,GAAG/J,EAAE,CAACyD,CAAd;AACA,UAAMuG,EAAE,GAAG,IAAI5J,OAAJ,CACT,CAAC0J,EAAE,CAAC7J,CAAH,GAAO8J,EAAE,CAAC9J,CAAX,IAAgB,GADP,EAET,CAAC6J,EAAE,CAAC5J,CAAH,GAAO6J,EAAE,CAAC7J,CAAX,IAAgB,GAFP,EAGT,CAAC4J,EAAE,CAAC3J,CAAH,GAAO4J,EAAE,CAAC5J,CAAX,IAAgB,GAHP,CAAX;;AAMA,UAAM8J,MAAM,GAAG,KAAKJ,YAAL,CAAkBjG,CAAlB,EAAqBkG,EAArB,CAAf;;AACA,UAAMI,MAAM,GAAG,KAAKL,YAAL,CAAkBjG,CAAlB,EAAqBmG,EAArB,CAAf;;AACA,UAAMI,MAAM,GAAG,KAAKN,YAAL,CAAkBjG,CAAlB,EAAqBoG,EAArB,CAAf;;AACAJ,MAAAA,KAAK,GAAG1I,IAAI,CAAC6H,GAAL,CAASkB,MAAT,EAAiBC,MAAjB,EAAyBC,MAAzB,CAAR;AAEA,UAAIF,MAAM,KAAKL,KAAf,EAAsBD,MAAM,CAACtJ,IAAP,CAAYyJ,EAAZ;AACtB,UAAII,MAAM,KAAKN,KAAf,EAAsBD,MAAM,CAACtJ,IAAP,CAAY0J,EAAZ;AACtB,UAAII,MAAM,KAAKP,KAAf,EAAsBD,MAAM,CAACtJ,IAAP,CAAY2J,EAAZ;AACvB;;AAED,WAAOJ,KAAP;AACD,GArCO;;AAuCA,sBAAA,GAAR,UAAqBhG,CAArB,EAAyCrC,CAAzC;AACS,QAAAtB,OAAA;AAAA,QAAGC,OAAH;AAAA,QAAMC,OAAN;AACP,QAAMmC,CAAC,GAAGsB,CAAC,CAACtB,CAAZ;AAEA,QAAMd,GAAG,GAAGc,CAAC,CAAC,CAAD,CAAD,GAAOrC,CAAP,GAAWA,CAAX,GACR,IAAIqC,CAAC,CAAC,CAAD,CAAL,GAAWrC,CAAX,GAAeC,CADP,GAER,IAAIoC,CAAC,CAAC,CAAD,CAAL,GAAWrC,CAAX,GAAeE,CAFP,GAGR,IAAImC,CAAC,CAAC,CAAD,CAAL,GAAWrC,CAHH,GAIJqC,CAAC,CAAC,CAAD,CAAD,GAAOpC,CAAP,GAAWA,CAJP,GAKR,IAAIoC,CAAC,CAAC,CAAD,CAAL,GAAWpC,CAAX,GAAeC,CALP,GAMR,IAAImC,CAAC,CAAC,CAAD,CAAL,GAAWpC,CANH,GAOJoC,CAAC,CAAC,CAAD,CAAD,GAAOnC,CAAP,GAAWA,CAPP,GAQR,IAAImC,CAAC,CAAC,CAAD,CAAL,GAAWnC,CARH,GASJmC,CAAC,CAAC,CAAD,CATT;AAWA,WAAOd,GAAP;AACD,GAhBO;;AAkBA,sBAAA,GAAR;AACE,SAAKsD,UAAL,GAAkB,KAAKA,UAAL,CAAgBmE,MAAhB,CAAuB,UAAAtC,CAAA;AAAK,aAAA,CAACA,CAAC,CAAClF,OAAH;AAAU,KAAtC,CAAlB;AAEA,QAAMoE,SAAS,GAAG,KAAKf,UAAvB;AACA,QAAMgB,QAAQ,GAAG,KAAKf,SAAtB;AAEAe,IAAAA,QAAQ,CAACP,OAAT,CAAiB,UAAAiC,MAAA;AAAU,aAAAA,MAAM,CAAC7D,MAAP,GAAgB,CAAhB;AAAiB,KAA5C;AACAkC,IAAAA,SAAS,CAACN,OAAV,CAAkB,UAAAU,QAAA;AAChBA,MAAAA,QAAQ,CAAC1E,CAAT,CAAWgE,OAAX,CAAmB,UAAAhE,CAAA;AACjBuE,QAAAA,QAAQ,CAACvE,CAAD,CAAR,CAAYoC,MAAZ,GAAqB,CAArB;AACD,OAFD;AAGD,KAJD;AAMA,QAAIyG,GAAG,GAAG,CAAV;AACAtE,IAAAA,QAAQ,CAACP,OAAT,CAAiB,UAAAiC,MAAA;AACf,UAAIA,MAAM,CAAC7D,MAAP,GAAgB,CAApB,EAAuB;AACrB6D,QAAAA,MAAM,CAAC9D,MAAP,GAAgB0G,GAAhB;AACAtE,QAAAA,QAAQ,CAACsE,GAAD,CAAR,CAAc9I,aAAd,GAA8BkG,MAAM,CAAClG,aAArC;AACAwE,QAAAA,QAAQ,CAACsE,GAAD,CAAR,CAAc3G,CAAd,GAAkB+D,MAAM,CAAC/D,CAAzB;AACA2G,QAAAA,GAAG;AACJ;AACF,KAPD;AASAvE,IAAAA,SAAS,CAACN,OAAV,CAAkB,UAAAoB,CAAA;AAChBA,MAAAA,CAAC,CAACpF,CAAF,CAAIgE,OAAJ,CAAY,UAAChE,CAAD,EAAImF,CAAJ;AACVC,QAAAA,CAAC,CAACpF,CAAF,CAAImF,CAAJ,IAASZ,QAAQ,CAACvE,CAAD,CAAR,CAAYmC,MAArB;AACD,OAFD;AAGD,KAJD;AAMAoC,IAAAA,QAAQ,CAACkB,MAAT,CAAgBoD,GAAhB;AACD,GA9BO;;AA+BV,oBAAA;AAAC;;AChcD;;;;;AAYA;;;;;;;;;;;;;;;;;;;;AAqBE,wBAAA,CAAY5E,QAAZ;AACE,SAAK6E,iBAAL,GAA0B7E,QAAiC,CAAC8E,gBAA5D;AACA,SAAKC,gBAAL,GAAwB/E,QAAxB;;AAEA,QAAI,KAAK6E,iBAAT,EAA4B;AAC1B,WAAKG,mBAAL,GAA2B,IAAIC,QAAJ,GAAqBC,kBAArB,CAAwClF,QAAxC,CAA3B;AACD,KAFD,MAEO;AACL,WAAKgF,mBAAL,GAA2B,KAAKD,gBAAhC;AACD;AACF;;;;AAEM,iBAAA,GAAP;AACE,QAAM/E,QAAQ,GAAG,KAAKgF,mBAAtB;AACAhF,IAAAA,QAAQ,CAACmF,aAAT;AAEA,WAAO;AACL7E,MAAAA,QAAQ,EAAEN,QAAQ,CAACM,QAAT,CAAkByB,GAAlB,CAAsB,UAAAqD,GAAA;AAAO,eAAA,IAAIxK,OAAJ,CAAYwK,GAAG,CAAC3K,CAAhB,EAAmB2K,GAAG,CAAC1K,CAAvB,EAA0B0K,GAAG,CAACzK,CAA9B,CAAA;AAAgC,OAA7D,CADL;AAELuH,MAAAA,KAAK,EAAElC,QAAQ,CAACkC,KAAT,CAAeH,GAAf,CAAmB,UAAAsD,IAAA;AAAQ,eAAA,IAAIhD,KAAJ,CAAUgD,IAAI,CAACnI,CAAf,EAAkBmI,IAAI,CAAClI,CAAvB,EAA0BkI,IAAI,CAACjI,CAA/B,CAAA;AAAiC,OAA5D;AAFF,KAAP;AAID,GARM;;AAUA,gBAAA,GAAP,UAAckI,KAAd;AAMU,QAAAhF,yBAAA;AAAA,QAAU4B,mBAAV;AAAA,QAAiBI,yCAAjB;AAAA,QAAmCC,mCAAnC;AAER,QAAMvC,QAAQ,GAAG,KAAKgF,mBAAtB;AACA,QAAMO,aAAa,GAAGvF,QAAQ,CAACwF,aAA/B;AACA,QAAMC,KAAK,GAAGF,aAAa,CAAC,CAAD,CAAb,IAAoBA,aAAa,CAAC,CAAD,CAAb,CAAiB/J,MAAjB,GAA0B,CAA5D;AACA,QAAMkK,MAAM,GAAGH,aAAa,CAAC,CAAD,CAAb,IAAoBA,aAAa,CAAC,CAAD,CAAb,CAAiB/J,MAAjB,GAA0B,CAA7D;AAEAwE,IAAAA,QAAQ,CAACM,QAAT,GAAoBA,QAAQ,CAACyB,GAAT,CAAa,UAAAC,MAAA;AAAU,aAAA,IAAIiD,SAAJ,CAAkBjD,MAAM,CAACvH,CAAzB,EAA4BuH,MAAM,CAACtH,CAAnC,EAAsCsH,MAAM,CAACrH,CAA7C,CAAA;AAA+C,KAAtE,CAApB;AACAqF,IAAAA,QAAQ,CAACkC,KAAT,GAAiBA,KAAK,CAACH,GAAN,CAAU,UAAAsD,IAAA;AAAQ,aAAA,IAAIJ,OAAJ,CAAgBI,IAAI,CAACnI,CAArB,EAAwBmI,IAAI,CAAClI,CAA7B,EAAgCkI,IAAI,CAACjI,CAArC,CAAA;AAAuC,KAAzD,CAAjB;;AAEA,QAAIqI,KAAJ,EAAW;AACTzF,MAAAA,QAAQ,CAACwF,aAAT,CAAuB,CAAvB,IAA4BjD,aAAa,CAACR,GAAd,CAAkB,UAAA4D,OAAA;AAC5C,eAAO3F,QAAQ,CAACwF,aAAT,CAAuB,CAAvB,EAA0BG,OAA1B,CAAP;AACD,OAF2B,CAA5B;AAGD;;AACD,QAAID,MAAJ,EAAY;AACV1F,MAAAA,QAAQ,CAACwF,aAAT,CAAuB,CAAvB,IAA4BjD,aAAa,CAACR,GAAd,CAAkB,UAAA4D,OAAA;AAC5C,eAAO3F,QAAQ,CAACwF,aAAT,CAAuB,CAAvB,EAA0BG,OAA1B,CAAP;AACD,OAF2B,CAA5B;AAGD;;AAED3F,IAAAA,QAAQ,CAAC4F,kBAAT;;AAEA,QAAI,KAAKf,iBAAT,EAA4B;AAC1B,UAAMgB,OAAO,GAAG,KAAKd,gBAArB;AAEA,UAAMe,SAAS,GAAG,IAAIb,cAAJ,GAA2Bc,YAA3B,CAAwC/F,QAAxC,CAAlB;AACA,UAAMgG,QAAQ,GAAGH,OAAO,CAACI,UAAR,CAAmBC,KAAnB,IAA4BL,OAAO,CAACI,UAAR,CAAmBC,KAAnB,CAAyBC,KAAzB,GAAiC,CAA9E;AACA,UAAMC,UAAU,GAAGP,OAAO,CAACI,UAAR,CAAmBI,OAAnB,IAA8BR,OAAO,CAACI,UAAR,CAAmBI,OAAnB,CAA2BF,KAA3B,GAAmC,CAApF;AAEA,UAAI,CAACH,QAAL,EAAeF,SAAS,CAACQ,eAAV,CAA0B,OAA1B;;AACf,UAAIF,UAAU,IAAIX,KAAlB,EAAyB;AACvB,YAAMc,UAAQ,GAAG,IAAIC,YAAJ,CAAiBtE,KAAK,CAAC1G,MAAN,GAAe,EAAhC,CAAjB;AAEA0G,QAAAA,KAAK,CAACnC,OAAN,CAAc,UAACsF,IAAD,EAAOM,OAAP;AACZ,cAAMc,YAAY,GAAG,CAACpB,IAAI,CAACnI,CAAN,EAASmI,IAAI,CAAClI,CAAd,EAAiBkI,IAAI,CAACjI,CAAtB,EAAyB2E,GAAzB,CAA6B,UAAAlG,GAAA;AAAO,mBAAAmE,QAAQ,CAACM,QAAT,CAAkBzE,GAAlB,CAAA;AAAsB,WAA1D,CAArB;AACA,cAAM6K,OAAO,GAAGnB,aAAa,CAAC,CAAD,CAAb,CAAiBI,OAAjB,CAAhB;AAEA,cAAMgB,KAAK,GAAG,IAAI1B,SAAJ,GAAoBlC,UAApB,CAA+B0D,YAAY,CAAC,CAAD,CAA3C,EAAgDA,YAAY,CAAC,CAAD,CAA5D,CAAd;AACA,cAAMG,KAAK,GAAG,IAAI3B,SAAJ,GAAoBlC,UAApB,CAA+B0D,YAAY,CAAC,CAAD,CAA3C,EAAgDA,YAAY,CAAC,CAAD,CAA5D,CAAd;AAEA,cAAMI,IAAI,GAAG,IAAI5B,OAAJ,GAAoBlC,UAApB,CAA+B2D,OAAO,CAAC,CAAD,CAAtC,EAA2CA,OAAO,CAAC,CAAD,CAAlD,CAAb;AACA,cAAMI,IAAI,GAAG,IAAI7B,OAAJ,GAAoBlC,UAApB,CAA+B2D,OAAO,CAAC,CAAD,CAAtC,EAA2CA,OAAO,CAAC,CAAD,CAAlD,CAAb;AAEA,cAAMpD,CAAC,GAAG,KAAKuD,IAAI,CAACpM,CAAL,GAASqM,IAAI,CAACpM,CAAd,GAAkBmM,IAAI,CAACnM,CAAL,GAASoM,IAAI,CAACrM,CAArC,CAAV;AACA,cAAM4L,OAAO,GAAGM,KAAK,CAACI,cAAN,CAAqBD,IAAI,CAACpM,CAA1B,EAA6BK,GAA7B,CAAiC6L,KAAK,CAACG,cAAN,CAAqBF,IAAI,CAACnM,CAA1B,CAAjC,EAA+DqM,cAA/D,CAA8EzD,CAA9E,EAAiFL,SAAjF,EAAhB;AAEA,cAAM+D,UAAU,GAAGrB,OAAO,GAAG,EAA7B;AAEA,WAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU5F,OAAV,CAAkB,UAAAkH,IAAA;AAChB,gBAAMC,YAAY,GAAGF,UAAU,GAAGC,IAAI,GAAG,CAAzC;AACAV,YAAAA,UAAQ,CAACW,YAAY,GAAG,CAAhB,CAAR,GAA6Bb,OAAO,CAAC5L,CAArC;AACA8L,YAAAA,UAAQ,CAACW,YAAY,GAAG,CAAhB,CAAR,GAA6Bb,OAAO,CAAC3L,CAArC;AACA6L,YAAAA,UAAQ,CAACW,YAAY,GAAG,CAAhB,CAAR,GAA6Bb,OAAO,CAAC1L,CAArC;AACA4L,YAAAA,UAAQ,CAACW,YAAY,GAAG,CAAhB,CAAR,GAA6B,CAA7B;AACD,WAND;AAOD,SAtBD;AAwBApB,QAAAA,SAAS,CAACqB,YAAV,CAAuB,SAAvB,EAAkC,IAAIlC,eAAJ,CAA0BsB,UAA1B,EAAoC,CAApC,CAAlC;AACD;;AAEDV,MAAAA,OAAO,CAAChL,IAAR,CAAaiL,SAAb;AACD,KAvCD,MAuCO;AACL9F,MAAAA,QAAQ,CAACoH,kBAAT,GAA8B,IAA9B;AACApH,MAAAA,QAAQ,CAACqH,kBAAT,GAA8B,IAA9B;AACArH,MAAAA,QAAQ,CAACsH,aAAT,GAAyB,IAAzB;AACD;;AAED,WAAO,IAAP;AACD,GA3EM;;AA4ET,sBAAA;AAAC;;AClIM,IAAMC,mBAAmB,GAAG,CACjC,UADiC,EAEjC,OAFiC,EAGjC,SAHiC,EAIjC,iBAJiC,EAKjC,aALiC,EAMjC,QANiC,EAOjC,UAPiC,EAQjC,KARiC,EASjC,cATiC,EAUjC,WAViC,CAA5B;;ACAP;;;;;;;;AAaE,uBAAA,CAAYC,QAAZ,EAA2BC,KAA3B;AAA2B,wBAAA,EAAA;AAAAA,MAAAA,aAAA;;;AACzB,SAAKC,MAAL,GAAcD,KAAK,GACfD,QAAQ,CAACC,KAAT,EADe,GAEfD,QAFJ;;AAIA,QAAIC,KAAJ,EAAW;AACT,WAAKE,YAAL,CAAkBH,QAAlB;AACD;AACF;;;AAEDhJ,EAAAA,qBAAA,sBAAA;SAAA;AACE,UAAMsB,UAAU,GAAoB,EAApC;AACA,WAAK4H,MAAL,CAAYE,QAAZ,CAAqB,UAAAC,GAAA;AACnB,YAAKA,GAAkB,CAACC,MAAxB,EAAgC;AAC9B,cAAMC,IAAI,GAAGF,GAAb;AACA,cAAMG,aAAa,GAAG,IAAIC,aAAJ,CAAkBF,IAAI,CAAC/H,QAAvB,CAAtB;AAEAF,UAAAA,UAAU,CAAC0D,IAAX,CAAgBwE,aAAhB;AACD;AACF,OAPD;AASA,aAAOlI,UAAP;AACD;;;GAZD;;AAcQ,sBAAA,GAAR,UAAqB0H,QAArB;AAAA,oBAAA;;AACE,QAAMU,UAAU,GAAiB,EAAjC;AACA,QAAMC,YAAY,GAAiB,EAAnC;AAEAX,IAAAA,QAAQ,CAACI,QAAT,CAAkB,UAAAC,GAAA;AAChB,UAAKA,GAAkB,CAACC,MAAxB,EAAgCI,UAAU,CAAC1E,IAAX,CAAgBqE,GAAhB;AACjC,KAFD;AAGA,SAAKH,MAAL,CAAYE,QAAZ,CAAqB,UAAAC,GAAA;AACnB,UAAKA,GAAkB,CAACC,MAAxB,EAAgCK,YAAY,CAAC3E,IAAb,CAAkBqE,GAAlB;AACjC,KAFD;AAIAM,IAAAA,YAAY,CAACpI,OAAb,CAAqB,UAACgI,IAAD,EAAOK,OAAP;AACnB,UAAMC,QAAQ,GAAGH,UAAU,CAACE,OAAD,CAA3B;AAEAL,MAAAA,IAAI,CAAC/H,QAAL,GAAgB+H,IAAI,CAAC/H,QAAL,CAAcyH,KAAd,EAAhB;AACAM,MAAAA,IAAI,CAACO,QAAL,GAAgBvL,KAAK,CAACwL,OAAN,CAAcR,IAAI,CAACO,QAAnB,IACZP,IAAI,CAACO,QAAL,CAAcvG,GAAd,CAAkB,UAAAyG,GAAA;AAAO,eAAAvI,KAAI,CAACwI,cAAL,CAAoBD,GAApB,CAAA;AAAwB,OAAjD,CADY,GAEZvI,KAAI,CAACwI,cAAL,CAAoBV,IAAI,CAACO,QAAzB,CAFJ;;AAIA,UAAKP,IAA0B,CAACW,aAAhC,EAA+C;AAC7CzI,QAAAA,KAAI,CAAC0I,kBAAL,CACEZ,IADF,EAEGM,QAA8B,CAACO,QAFlC;AAID;AACF,KAdD;AAeD,GA1BO;;AA4BA,wBAAA,GAAR,UAAuBJ,GAAvB;AACE,QAAMK,SAAS,GAAGL,GAAG,CAACf,KAAJ,EAAlB;;AAEA,QAAIe,GAAG,CAACM,IAAJ,KAAa,sBAAjB,EAAyC;AACvC,UAAMC,aAAW,GAAGP,GAApB;AACAjB,MAAAA,mBAAmB,CAACxH,OAApB,CAA4B,UAAAiJ,OAAA;AAC1B,YAAID,aAAW,CAACC,OAAD,CAAX,IAAwB,IAA5B,EAAkC;AAElC,YAAMC,OAAO,GAAGF,aAAW,CAACC,OAAD,CAA3B;AACAD,QAAAA,aAAW,CAACC,OAAD,CAAX,GAAuBD,aAAW,CAACC,OAAD,CAAX,CAAqBvB,KAArB,EAAvB;AACAsB,QAAAA,aAAW,CAACC,OAAD,CAAX,CAAqBE,WAArB,GAAmC,IAAnC;;AAEA,YAAIF,OAAO,KAAK,cAAZ,IAA8BC,OAAO,KAAKF,aAAW,CAACI,YAA1D,EAAwE;AACtEJ,UAAAA,aAAW,CAACI,YAAZ,GAA2BJ,aAAW,CAACK,YAAvC;AACD;AACF,OAVD;AAWD,KAbD,MAaO;AACL,WAAK,IAAMC,QAAX,IAAuBR,SAAvB,EAAkC;AAChC,YAAIA,SAAS,CAACQ,QAAD,CAAT,IAAuBR,SAAS,CAACQ,QAAD,CAAT,CAAoBC,SAA/C,EAA0D;AACxDT,UAAAA,SAAS,CAACQ,QAAD,CAAT,GAAsBR,SAAS,CAACQ,QAAD,CAAT,CAAoB5B,KAApB,EAAtB;AACAoB,UAAAA,SAAS,CAACQ,QAAD,CAAT,CAAoBH,WAApB,GAAkC,IAAlC;AACD;AACF;AACF;;AAEDL,IAAAA,SAAS,CAACK,WAAV,GAAwB,IAAxB;AACA,WAAOL,SAAP;AACD,GA3BO;;AA6BA,4BAAA,GAAR,UAA2BU,WAA3B,EAA2DX,QAA3D;AACE,QAAM5I,QAAQ,GAAGuJ,WAAW,CAACvJ,QAA7B;AACA,QAAMwJ,SAAS,GAAGxJ,QAAQ,CAACiG,UAAT,CAAoBwD,QAAtC;AACA,QAAMC,YAAY,GAAG1J,QAAQ,CAACiG,UAAT,CAAoB0D,SAAzC;AACA,QAAMC,WAAW,GAAG5J,QAAQ,CAACiG,UAAT,CAAoB4D,UAAxC;AAEAN,IAAAA,WAAW,CAACO,iBAAZ;AACAlB,IAAAA,QAAQ,CAACpG,MAAT;AAEA,QAAMuH,aAAa,GAAGnB,QAAQ,CAACoB,YAA/B;AACA,QAAMC,WAAW,GAAG,IAAIhF,OAAJ,EAApB;;4BACSiF;AACPD,MAAAA,WAAW,CAACE,QAAZ;AAEA,UAAMC,OAAO,GAAG,IAAInF,OAAJ,EAAhB;AACAmF,MAAAA,OAAO,CAACpN,GAAR,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB;AACA,UAAMqN,UAAU,GAAG,IAAIpF,OAAJ,EAAnB;AACAoF,MAAAA,UAAU,CAACrN,GAAX,CACEwM,SAAS,CAACc,IAAV,CAAeJ,MAAf,CADF,EAEEV,SAAS,CAACe,IAAV,CAAeL,MAAf,CAFF,EAGEV,SAAS,CAACgB,IAAV,CAAeN,MAAf,CAHF,EAIE,CAJF,EAKEO,YALF,CAKelB,WAAW,CAACmB,UAL3B;AAOA,UAAMC,OAAO,GAAG,CACdf,WAAW,CAACU,IAAZ,CAAiBJ,MAAjB,CADc,EAEdN,WAAW,CAACW,IAAZ,CAAiBL,MAAjB,CAFc,EAGdN,WAAW,CAACY,IAAZ,CAAiBN,MAAjB,CAHc,EAIdN,WAAW,CAACgB,IAAZ,CAAiBV,MAAjB,CAJc,CAAhB;AAOA,UAAMW,QAAQ,GAAG,CACfnB,YAAY,CAACY,IAAb,CAAkBJ,MAAlB,CADe,EAEfR,YAAY,CAACa,IAAb,CAAkBL,MAAlB,CAFe,EAGfR,YAAY,CAACc,IAAb,CAAkBN,MAAlB,CAHe,EAIfR,YAAY,CAACkB,IAAb,CAAkBV,MAAlB,CAJe,CAAjB;AAOAS,MAAAA,OAAO,CAAC5K,OAAR,CAAgB,UAAC+K,MAAD,EAASC,KAAT;AACd,YAAMC,UAAU,GAAG,IAAI/F,OAAJ,GAAoBgG,SAApB,CAA8BlB,aAA9B,EAA6Cc,QAAQ,CAACE,KAAD,CAAR,GAAkB,EAA/D,EAAmEhE,cAAnE,CAAkF+D,MAAlF,CAAnB;AACAV,QAAAA,OAAO,CAACtP,GAAR,CAAYuP,UAAU,CAAC5C,KAAX,GAAmBgD,YAAnB,CAAgCO,UAAhC,CAAZ;AACD,OAHD;AAKA,UAAME,WAAW,GAAGd,OAAO,CAACK,YAAR,CAAqBlB,WAAW,CAAC4B,iBAAjC,CAApB;AAEA3B,MAAAA,SAAS,CAAC4B,MAAV,CAAiBlB,MAAjB,EAAyBgB,WAAW,CAACzQ,CAArC,EAAwCyQ,WAAW,CAACxQ,CAApD,EAAuDwQ,WAAW,CAACvQ,CAAnE;;;AAlCF,SAAK,IAAIuP,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGV,SAAS,CAACrD,KAAxC,EAA+C+D,MAAM,EAArD;cAASA;AAmCR;;AAED,QAAMmB,MAAM,GAAG9B,WAAW,CAAC8B,MAA3B;AACA,QAAMtD,IAAI,GAAG,IAAI9C,IAAJ,CAAesE,WAAW,CAACvJ,QAA3B,EAAqCuJ,WAAW,CAACjB,QAAjD,EAA2DzN,IAA3D,CAAgE0O,WAAhE,CAAb;AAECxB,IAAAA,IAAI,CAAC/H,QAAL,CAAuCsG,eAAvC,CAAuD,WAAvD;AACAyB,IAAAA,IAAI,CAAC/H,QAAL,CAAuCsG,eAAvC,CAAuD,YAAvD;AAED+E,IAAAA,MAAM,CAACC,MAAP,CAAc/B,WAAd;AACA8B,IAAAA,MAAM,CAACvQ,GAAP,CAAWiN,IAAX;AACD,GAxDO;;AAyDV,qBAAA;AAAC;;;;"}