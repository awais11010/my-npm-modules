
// Creates a hollow box with an opening on the specified side.
// function generateHollowBox(size, openingDir = [0,0,0]) {
//     let tile = new Tile3D(size, size, size);
//
//     for(let x = 0; x < size; x++) {
//         for(let y = 0; y < size; y++) {
//             for(let z = 0; z < size; z++) {
//                 // If the pixel is on the edge of the cube, or on the opening face.
//                 if(x === 0 || y === 0 || z === 0 || x === size-1 || y === size-1 || z === size-1) {
//                     if((openingDir[0] === 1 && x === size-1) || (openingDir[0] === -1 && x === 0) ||
//                         (openingDir[1] === 1 && y === size-1) || (openingDir[1] === -1 && y === 0) ||
//                         (openingDir[2] === 1 && z === size-1) || (openingDir[2] === -1 && z === 0)) {
//                         // Do not fill the opening face.
//                         continue;
//                     }
//                     tile.setPixel(x, y, z, 1);
//                 }
//             }
//         }
//     }
//
//     return tile;
// }

// Creates a single side of a box.
// function generateBoxFace(size, dir) {
//     let tile = new Tile3D(size, size, size);
//
//     let facePosition;
//     if(dir[0] === 1) {
//         facePosition = size - 1;
//         for(let y = 0; y < size; y++) {
//             for(let z = 0; z < size; z++) {
//                 tile.setPixel(facePosition, y, z, 1);
//             }
//         }
//     } else if(dir[0] === -1) {
//         facePosition = 0;
//         for(let y = 0; y < size; y++) {
//             for(let z = 0; z < size; z++) {
//                 tile.setPixel(facePosition, y, z, 1);
//             }
//         }
//     } else if(dir[1] === 1) {
//         facePosition = size - 1;
//         for(let x = 0; x < size; x++) {
//             for(let z = 0; z < size; z++) {
//                 tile.setPixel(x, facePosition, z, 1);
//             }
//         }
//     } else if(dir[1] === -1) {
//         facePosition = 0;
//         for(let x = 0; x < size; x++) {
//             for(let z = 0; z < size; z++) {
//                 tile.setPixel(x, facePosition, z, 1);
//             }
//         }
//     } else if(dir[2] === 1) {
//         facePosition = size - 1;
//         for(let x = 0; x < size; x++) {
//             for(let y = 0; y < size; y++) {
//                 tile.setPixel(x, y, facePosition, 1);
//             }
//         }
//     } else if(dir[2] === -1) {
//         facePosition = 0;
//         for(let x = 0; x < size; x++) {
//             for(let y = 0; y < size; y++) {
//                 tile.setPixel(x, y, facePosition, 1);
//             }
//         }
//     }
//
//     return tile;
// }

//doubles the resolution of a Tile3d -- as if each pixel is cut in 2 along each dim with the same contents
// function doubleTileResolution(tile) {
//     const oldWidth = tile.getWidth();
//     const oldHeight = tile.getHeight();
//     const oldDepth = tile.getDepth();
//
//     const newWidth = oldWidth * 2;
//     const newHeight = oldHeight * 2;
//     const newDepth = oldDepth * 2;
//
//     let newTile = new Tile3D(newWidth, newHeight, newDepth);
//
//     for (let x = 0; x < oldWidth; x++) {
//         for (let y = 0; y < oldHeight; y++) {
//             for (let z = 0; z < oldDepth; z++) {
//                 let pixel = tile.getPixel(x, y, z);
//                 newTile.setPixel(x * 2, y * 2, z * 2, pixel);
//                 newTile.setPixel(x * 2 + 1, y * 2, z * 2, pixel);
//                 newTile.setPixel(x * 2, y * 2 + 1, z * 2, pixel);
//                 newTile.setPixel(x * 2 + 1, y * 2 + 1, z * 2, pixel);
//                 newTile.setPixel(x * 2, y * 2, z * 2 + 1, pixel);
//                 newTile.setPixel(x * 2 + 1, y * 2, z * 2 + 1, pixel);
//                 newTile.setPixel(x * 2, y * 2 + 1, z * 2 + 1, pixel);
//                 newTile.setPixel(x * 2 + 1, y * 2 + 1, z * 2 + 1, pixel);
//             }
//         }
//     }
//
//     return newTile;
// }


// const Tile2D = class extends Tile3D {
//     constructor(width, height) {
//         super(width, height, 1);
//     }
// }

//extra functions for boolean ops:

//todo instead of all these ops below, simple op to force sides of 2 tiles to be the same [copy and return connectable versions]

// Rotates the tile according to the rot vector and returns a new Tile3D.
// rotated(rot) { //rot = [1,0,0] or [0,-1,0] etc ...
//     const w = this.getWidth(), h = this.getHeight(), d = this.getDepth();
//     const absRot = rot.map(Math.abs);
//
//     // Check which axis has been rotated (only support rotation in one direction at a time for simplicity).
//     let axis = absRot.indexOf(Math.max(...absRot));
//     if (absRot.filter(v => v !== 0).length !== 1) {
//         throw new Error('Only single-axis rotations supported');
//     }
//
//     let rotated = new Tile3D(h, d, w);
//
//     for (let x = 0; x < w; x++) {
//         for (let y = 0; y < h; y++) {
//             for (let z = 0; z < d; z++) {
//                 let [nx, ny, nz] = [x, y, z]; // new indices
//
//                 if (axis === 0) { // x rotation
//                     if (rot[axis] > 0) { // clockwise
//                         [nx, ny, nz] = [x, d - 1 - z, y];
//                     } else { // counterclockwise
//                         [nx, ny, nz] = [x, z, h - 1 - y];
//                     }
//                 } else if (axis === 1) { // y rotation
//                     if (rot[axis] > 0) { // clockwise
//                         [nx, ny, nz] = [z, y, w - 1 - x];
//                     } else { // counterclockwise
//                         [nx, ny, nz] = [w - 1 - z, y, x];
//                     }
//                 } else if (axis === 2) { // z rotation
//                     if (rot[axis] > 0) { // clockwise
//                         [nx, ny, nz] = [h - 1 - y, x, z];
//                     } else { // counterclockwise
//                         [nx, ny, nz] = [y, w - 1 - x, z];
//                     }
//                 }
//
//                 rotated.setPixel(nx, ny, nz, this.getPixel(x, y, z));
//             }
//         }
//     }
//
//     return rotated;
// }
//
// // Mirrors the tile according to the mirror vector and returns a new Tile3D.
// mirrored(mirror) { //mirror = dir like [0,1,0]
//     const w = this.getWidth(), h = this.getHeight(), d = this.getDepth();
//
//     // Check which axis is mirrored (only support mirror in one direction at a time for simplicity).
//     let axis = mirror.indexOf(Math.max(...mirror));
//     if (mirror.filter(v => v !== 0).length !== 1) {
//         throw new Error('Only single-axis mirroring supported');
//     }
//
//     let mirroredTile = new Tile3D(w, h, d);
//
//     for (let x = 0; x < w; x++) {
//         for (let y = 0; y < h; y++) {
//             for (let z = 0; z < d; z++) {
//                 let [nx, ny, nz] = [x, y, z]; // new indices
//
//                 if (axis === 0) { // x axis mirror
//                     nx = w - 1 - x;
//                 } else if (axis === 1) { // y axis mirror
//                     ny = h - 1 - y;
//                 } else if (axis === 2) { // z axis mirror
//                     nz = d - 1 - z;
//                 }
//
//                 mirroredTile.setPixel(nx, ny, nz, this.getPixel(x, y, z));
//             }
//         }
//     }
//
//     return mirroredTile;
// }
//
// union(other) {
//     if(this.getWidth() !== other.getWidth() || this.getHeight() !== other.getHeight() || this.getDepth() !== other.getDepth()) {
//         throw new Error("Tiles must have the same dimensions for union operation.");
//     }
//
//     let result = new Tile3D(this.getWidth(), this.getHeight(), this.getDepth());
//     for(let i = 0; i < this.data.length; i++) {
//         result.data[i] = Math.max(this.data[i], other.data[i]);
//     }
//
//     return result;
// }
//
// intersect(other) {
//     if(this.getWidth() !== other.getWidth() || this.getHeight() !== other.getHeight() || this.getDepth() !== other.getDepth()) {
//         throw new Error("Tiles must have the same dimensions for intersection operation.");
//     }
//
//     let result = new Tile3D(this.getWidth(), this.getHeight(), this.getDepth());
//     for(let i = 0; i < this.data.length; i++) {
//         if(this.data[i] > 0 && other.data[i] > 0) {
//             result.data[i] = Math.max(this.data[i], other.data[i]);
//         }
//     }
//
//     return result;
// }
//
// subtract(other) {
//     if(this.getWidth() !== other.getWidth() || this.getHeight() !== other.getHeight() || this.getDepth() !== other.getDepth()) {
//         throw new Error("Tiles must have the same dimensions for subtraction operation.");
//     }
//
//     let result = new Tile3D(this.getWidth(), this.getHeight(), this.getDepth());
//     let invertedOther = other.clone().invert();
//
//     for(let i = 0; i < this.data.length; i++) {
//         if(invertedOther.data[i] > 0) {
//             result.data[i] = this.data[i];
//         }
//     }
//
//     return result;
// }
//
// // This function is used for subtract operation. It inverts the tile by turning all 0s to 1s and all non-zeros to 0.
// invert() {
//     for(let i = 0; i < this.data.length; i++) {
//         this.data[i] = this.data[i] > 0 ? 0 : 1;
//     }
//     return this;
// }